/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// Market
    /// </summary>
    [DataContract(Name = "Market")]
    public partial class Market : IEquatable<Market>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Market" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Market() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Market" /> class.
        /// </summary>
        /// <param name="symbol">The symbol of the market. The symbol is the same as the waypoint where the market is located. (required).</param>
        /// <param name="exports">The list of goods that are exported from this market. (required).</param>
        /// <param name="imports">The list of goods that are sought as imports in this market. (required).</param>
        /// <param name="exchange">The list of goods that are bought and sold between agents at this market. (required).</param>
        /// <param name="transactions">The list of recent transactions at this market. Visible only when a ship is present at the market..</param>
        /// <param name="tradeGoods">The list of goods that are traded at this market. Visible only when a ship is present at the market..</param>
        public Market(string symbol = default(string), List<TradeGood> exports = default(List<TradeGood>), List<TradeGood> imports = default(List<TradeGood>), List<TradeGood> exchange = default(List<TradeGood>), List<MarketTransaction> transactions = default(List<MarketTransaction>), List<MarketTradeGood> tradeGoods = default(List<MarketTradeGood>))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for Market and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "exports" is required (not null)
            if (exports == null)
            {
                throw new ArgumentNullException("exports is a required property for Market and cannot be null");
            }
            this.Exports = exports;
            // to ensure "imports" is required (not null)
            if (imports == null)
            {
                throw new ArgumentNullException("imports is a required property for Market and cannot be null");
            }
            this.Imports = imports;
            // to ensure "exchange" is required (not null)
            if (exchange == null)
            {
                throw new ArgumentNullException("exchange is a required property for Market and cannot be null");
            }
            this.Exchange = exchange;
            this.Transactions = transactions;
            this.TradeGoods = tradeGoods;
        }

        /// <summary>
        /// The symbol of the market. The symbol is the same as the waypoint where the market is located.
        /// </summary>
        /// <value>The symbol of the market. The symbol is the same as the waypoint where the market is located.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The list of goods that are exported from this market.
        /// </summary>
        /// <value>The list of goods that are exported from this market.</value>
        [DataMember(Name = "exports", IsRequired = true, EmitDefaultValue = true)]
        public List<TradeGood> Exports { get; set; }

        /// <summary>
        /// The list of goods that are sought as imports in this market.
        /// </summary>
        /// <value>The list of goods that are sought as imports in this market.</value>
        [DataMember(Name = "imports", IsRequired = true, EmitDefaultValue = true)]
        public List<TradeGood> Imports { get; set; }

        /// <summary>
        /// The list of goods that are bought and sold between agents at this market.
        /// </summary>
        /// <value>The list of goods that are bought and sold between agents at this market.</value>
        [DataMember(Name = "exchange", IsRequired = true, EmitDefaultValue = true)]
        public List<TradeGood> Exchange { get; set; }

        /// <summary>
        /// The list of recent transactions at this market. Visible only when a ship is present at the market.
        /// </summary>
        /// <value>The list of recent transactions at this market. Visible only when a ship is present at the market.</value>
        [DataMember(Name = "transactions", EmitDefaultValue = false)]
        public List<MarketTransaction> Transactions { get; set; }

        /// <summary>
        /// The list of goods that are traded at this market. Visible only when a ship is present at the market.
        /// </summary>
        /// <value>The list of goods that are traded at this market. Visible only when a ship is present at the market.</value>
        [DataMember(Name = "tradeGoods", EmitDefaultValue = false)]
        public List<MarketTradeGood> TradeGoods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Market {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Exports: ").Append(Exports).Append("\n");
            sb.Append("  Imports: ").Append(Imports).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  TradeGoods: ").Append(TradeGoods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Market);
        }

        /// <summary>
        /// Returns true if Market instances are equal
        /// </summary>
        /// <param name="input">Instance of Market to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Market input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Exports == input.Exports ||
                    this.Exports != null &&
                    input.Exports != null &&
                    this.Exports.SequenceEqual(input.Exports)
                ) && 
                (
                    this.Imports == input.Imports ||
                    this.Imports != null &&
                    input.Imports != null &&
                    this.Imports.SequenceEqual(input.Imports)
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    this.Exchange != null &&
                    input.Exchange != null &&
                    this.Exchange.SequenceEqual(input.Exchange)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.TradeGoods == input.TradeGoods ||
                    this.TradeGoods != null &&
                    input.TradeGoods != null &&
                    this.TradeGoods.SequenceEqual(input.TradeGoods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Exports != null)
                {
                    hashCode = (hashCode * 59) + this.Exports.GetHashCode();
                }
                if (this.Imports != null)
                {
                    hashCode = (hashCode * 59) + this.Imports.GetHashCode();
                }
                if (this.Exchange != null)
                {
                    hashCode = (hashCode * 59) + this.Exchange.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.TradeGoods != null)
                {
                    hashCode = (hashCode * 59) + this.TradeGoods.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
