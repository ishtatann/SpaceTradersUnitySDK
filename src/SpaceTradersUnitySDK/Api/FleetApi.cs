/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SpaceTradersUnitySDK.Client;
using SpaceTradersUnitySDK.Model;

namespace SpaceTradersUnitySDK.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFleetApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#39;s traits.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>CreateChart201Response</returns>
        CreateChart201Response CreateChart(string shipSymbol);

        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#39;s traits.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of CreateChart201Response</returns>
        ApiResponse<CreateChart201Response> CreateChartWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>CreateShipShipScan201Response</returns>
        CreateShipShipScan201Response CreateShipShipScan(string shipSymbol);

        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of CreateShipShipScan201Response</returns>
        ApiResponse<CreateShipShipScan201Response> CreateShipShipScanWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems&#39; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>CreateShipSystemScan201Response</returns>
        CreateShipSystemScan201Response CreateShipSystemScan(string shipSymbol);

        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems&#39; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of CreateShipSystemScan201Response</returns>
        ApiResponse<CreateShipSystemScan201Response> CreateShipSystemScanWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#39; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>CreateShipWaypointScan201Response</returns>
        CreateShipWaypointScan201Response CreateShipWaypointScan(string shipSymbol);

        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#39; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of CreateShipWaypointScan201Response</returns>
        ApiResponse<CreateShipWaypointScan201Response> CreateShipWaypointScanWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#39;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>CreateSurvey201Response</returns>
        CreateSurvey201Response CreateSurvey(string shipSymbol);

        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#39;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of CreateSurvey201Response</returns>
        ApiResponse<CreateSurvey201Response> CreateSurveyWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>DockShip200Response</returns>
        DockShip200Response DockShip(string shipSymbol);

        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of DockShip200Response</returns>
        ApiResponse<DockShip200Response> DockShipWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="extractResourcesRequest"> (optional)</param>
        /// <returns>ExtractResources201Response</returns>
        ExtractResources201Response ExtractResources(string shipSymbol, ExtractResourcesRequest extractResourcesRequest = default(ExtractResourcesRequest));

        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="extractResourcesRequest"> (optional)</param>
        /// <returns>ApiResponse of ExtractResources201Response</returns>
        ApiResponse<ExtractResources201Response> ExtractResourcesWithHttpInfo(string shipSymbol, ExtractResourcesRequest extractResourcesRequest = default(ExtractResourcesRequest));
        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <returns>GetMounts200Response</returns>
        GetMounts200Response GetMounts(string shipSymbol);

        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <returns>ApiResponse of GetMounts200Response</returns>
        ApiResponse<GetMounts200Response> GetMountsWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>GetMyShip200Response</returns>
        GetMyShip200Response GetMyShip(string shipSymbol);

        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of GetMyShip200Response</returns>
        ApiResponse<GetMyShip200Response> GetMyShipWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>GetMyShipCargo200Response</returns>
        GetMyShipCargo200Response GetMyShipCargo(string shipSymbol);

        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of GetMyShipCargo200Response</returns>
        ApiResponse<GetMyShipCargo200Response> GetMyShipCargoWithHttpInfo(string shipSymbol);
        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>GetMyShips200Response</returns>
        GetMyShips200Response GetMyShips(int? page = default(int?), int? limit = default(int?));

        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>ApiResponse of GetMyShips200Response</returns>
        ApiResponse<GetMyShips200Response> GetMyShipsWithHttpInfo(int? page = default(int?), int? limit = default(int?));
        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>GetShipCooldown200Response</returns>
        GetShipCooldown200Response GetShipCooldown(string shipSymbol);

        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of GetShipCooldown200Response</returns>
        ApiResponse<GetShipCooldown200Response> GetShipCooldownWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>GetShipNav200Response</returns>
        GetShipNav200Response GetShipNav(string shipSymbol);

        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of GetShipNav200Response</returns>
        ApiResponse<GetShipNav200Response> GetShipNavWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="installMountRequest"> (optional)</param>
        /// <returns>InstallMount201Response</returns>
        InstallMount201Response InstallMount(string shipSymbol, InstallMountRequest installMountRequest = default(InstallMountRequest));

        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="installMountRequest"> (optional)</param>
        /// <returns>ApiResponse of InstallMount201Response</returns>
        ApiResponse<InstallMount201Response> InstallMountWithHttpInfo(string shipSymbol, InstallMountRequest installMountRequest = default(InstallMountRequest));
        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship&#39;s cargo hold.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jettisonRequest"> (optional)</param>
        /// <returns>Jettison200Response</returns>
        Jettison200Response Jettison(string shipSymbol, JettisonRequest jettisonRequest = default(JettisonRequest));

        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship&#39;s cargo hold.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jettisonRequest"> (optional)</param>
        /// <returns>ApiResponse of Jettison200Response</returns>
        ApiResponse<Jettison200Response> JettisonWithHttpInfo(string shipSymbol, JettisonRequest jettisonRequest = default(JettisonRequest));
        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target system. The ship must be in orbit to use this function. When used while in orbit of a Jump Gate waypoint, any ship can use this command, jumping to the target system&#39;s Jump Gate waypoint.  When used elsewhere, jumping requires the ship to have a &#x60;Jump Drive&#x60; module installed and consumes a unit of antimatter from the ship&#39;s cargo. The command will fail if there is no antimatter to consume. When jumping via the &#x60;Jump Drive&#x60; module, the ship ends up at its largest source of energy in the system, such as a gas planet or a jump gate.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jumpShipRequest"> (optional)</param>
        /// <returns>JumpShip200Response</returns>
        JumpShip200Response JumpShip(string shipSymbol, JumpShipRequest jumpShipRequest = default(JumpShipRequest));

        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target system. The ship must be in orbit to use this function. When used while in orbit of a Jump Gate waypoint, any ship can use this command, jumping to the target system&#39;s Jump Gate waypoint.  When used elsewhere, jumping requires the ship to have a &#x60;Jump Drive&#x60; module installed and consumes a unit of antimatter from the ship&#39;s cargo. The command will fail if there is no antimatter to consume. When jumping via the &#x60;Jump Drive&#x60; module, the ship ends up at its largest source of energy in the system, such as a gas planet or a jump gate.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jumpShipRequest"> (optional)</param>
        /// <returns>ApiResponse of JumpShip200Response</returns>
        ApiResponse<JumpShip200Response> JumpShipWithHttpInfo(string shipSymbol, JumpShipRequest jumpShipRequest = default(JumpShipRequest));
        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#39;s current location. Navigating will consume the necessary fuel from the ship&#39;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s Warp or Jump actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <returns>NavigateShip200Response</returns>
        NavigateShip200Response NavigateShip(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest));

        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#39;s current location. Navigating will consume the necessary fuel from the ship&#39;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s Warp or Jump actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <returns>ApiResponse of NavigateShip200Response</returns>
        ApiResponse<NavigateShip200Response> NavigateShipWithHttpInfo(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest));
        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at a faction&#39;s HQ waypoint to negotiate a contract with that faction.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <returns>NegotiateContract200Response</returns>
        NegotiateContract200Response NegotiateContract(string shipSymbol);

        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at a faction&#39;s HQ waypoint to negotiate a contract with that faction.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <returns>ApiResponse of NegotiateContract200Response</returns>
        ApiResponse<NegotiateContract200Response> NegotiateContractWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>OrbitShip200Response</returns>
        OrbitShip200Response OrbitShip(string shipSymbol);

        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of OrbitShip200Response</returns>
        ApiResponse<OrbitShip200Response> OrbitShipWithHttpInfo(string shipSymbol);
        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="patchShipNavRequest"> (optional)</param>
        /// <returns>GetShipNav200Response</returns>
        GetShipNav200Response PatchShipNav(string shipSymbol, PatchShipNavRequest patchShipNavRequest = default(PatchShipNavRequest));

        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="patchShipNavRequest"> (optional)</param>
        /// <returns>ApiResponse of GetShipNav200Response</returns>
        ApiResponse<GetShipNav200Response> PatchShipNavWithHttpInfo(string shipSymbol, PatchShipNavRequest patchShipNavRequest = default(PatchShipNavRequest));
        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#39;s cargo hold.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="purchaseCargoRequest"> (optional)</param>
        /// <returns>PurchaseCargo201Response</returns>
        PurchaseCargo201Response PurchaseCargo(string shipSymbol, PurchaseCargoRequest purchaseCargoRequest = default(PurchaseCargoRequest));

        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#39;s cargo hold.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="purchaseCargoRequest"> (optional)</param>
        /// <returns>ApiResponse of PurchaseCargo201Response</returns>
        ApiResponse<PurchaseCargo201Response> PurchaseCargoWithHttpInfo(string shipSymbol, PurchaseCargoRequest purchaseCargoRequest = default(PurchaseCargoRequest));
        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#39;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseShipRequest"> (optional)</param>
        /// <returns>PurchaseShip201Response</returns>
        PurchaseShip201Response PurchaseShip(PurchaseShipRequest purchaseShipRequest = default(PurchaseShipRequest));

        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#39;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseShipRequest"> (optional)</param>
        /// <returns>ApiResponse of PurchaseShip201Response</returns>
        ApiResponse<PurchaseShip201Response> PurchaseShipWithHttpInfo(PurchaseShipRequest purchaseShipRequest = default(PurchaseShipRequest));
        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#39;s fuel.  Ships will always be refuel to their frame&#39;s maximum fuel capacity when using this action.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="refuelShipRequest"> (optional)</param>
        /// <returns>RefuelShip200Response</returns>
        RefuelShip200Response RefuelShip(string shipSymbol, RefuelShipRequest refuelShipRequest = default(RefuelShipRequest));

        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#39;s fuel.  Ships will always be refuel to their frame&#39;s maximum fuel capacity when using this action.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="refuelShipRequest"> (optional)</param>
        /// <returns>ApiResponse of RefuelShip200Response</returns>
        ApiResponse<RefuelShip200Response> RefuelShipWithHttpInfo(string shipSymbol, RefuelShipRequest refuelShipRequest = default(RefuelShipRequest));
        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="removeMountRequest"> (optional)</param>
        /// <returns>RemoveMount201Response</returns>
        RemoveMount201Response RemoveMount(string shipSymbol, RemoveMountRequest removeMountRequest = default(RemoveMountRequest));

        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="removeMountRequest"> (optional)</param>
        /// <returns>ApiResponse of RemoveMount201Response</returns>
        ApiResponse<RemoveMount201Response> RemoveMountWithHttpInfo(string shipSymbol, RemoveMountRequest removeMountRequest = default(RemoveMountRequest));
        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="sellCargoRequest"> (optional)</param>
        /// <returns>SellCargo201Response</returns>
        SellCargo201Response SellCargo(string shipSymbol, SellCargoRequest sellCargoRequest = default(SellCargoRequest));

        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="sellCargoRequest"> (optional)</param>
        /// <returns>ApiResponse of SellCargo201Response</returns>
        ApiResponse<SellCargo201Response> SellCargoWithHttpInfo(string shipSymbol, SellCargoRequest sellCargoRequest = default(SellCargoRequest));
        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="shipRefineRequest"> (optional)</param>
        /// <returns>ShipRefine201Response</returns>
        ShipRefine201Response ShipRefine(string shipSymbol, ShipRefineRequest shipRefineRequest = default(ShipRefineRequest));

        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="shipRefineRequest"> (optional)</param>
        /// <returns>ApiResponse of ShipRefine201Response</returns>
        ApiResponse<ShipRefine201Response> ShipRefineWithHttpInfo(string shipSymbol, ShipRefineRequest shipRefineRequest = default(ShipRefineRequest));
        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#39;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#39;s symbol.</param>
        /// <param name="transferCargoRequest"> (optional)</param>
        /// <returns>TransferCargo200Response</returns>
        TransferCargo200Response TransferCargo(string shipSymbol, TransferCargoRequest transferCargoRequest = default(TransferCargoRequest));

        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#39;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#39;s symbol.</param>
        /// <param name="transferCargoRequest"> (optional)</param>
        /// <returns>ApiResponse of TransferCargo200Response</returns>
        ApiResponse<TransferCargo200Response> TransferCargoWithHttpInfo(string shipSymbol, TransferCargoRequest transferCargoRequest = default(TransferCargoRequest));
        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#39;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <returns>NavigateShip200Response</returns>
        NavigateShip200Response WarpShip(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest));

        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#39;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <returns>ApiResponse of NavigateShip200Response</returns>
        ApiResponse<NavigateShip200Response> WarpShipWithHttpInfo(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFleetApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#39;s traits.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateChart201Response</returns>
        System.Threading.Tasks.Task<CreateChart201Response> CreateChartAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Chart
        /// </summary>
        /// <remarks>
        /// Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#39;s traits.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateChart201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateChart201Response>> CreateChartWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipShipScan201Response</returns>
        System.Threading.Tasks.Task<CreateShipShipScan201Response> CreateShipShipScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Scan Ships
        /// </summary>
        /// <remarks>
        /// Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipShipScan201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateShipShipScan201Response>> CreateShipShipScanWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems&#39; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipSystemScan201Response</returns>
        System.Threading.Tasks.Task<CreateShipSystemScan201Response> CreateShipSystemScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Scan Systems
        /// </summary>
        /// <remarks>
        /// Scan for nearby systems, retrieving information on the systems&#39; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipSystemScan201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateShipSystemScan201Response>> CreateShipSystemScanWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#39; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipWaypointScan201Response</returns>
        System.Threading.Tasks.Task<CreateShipWaypointScan201Response> CreateShipWaypointScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Scan Waypoints
        /// </summary>
        /// <remarks>
        /// Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#39; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipWaypointScan201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateShipWaypointScan201Response>> CreateShipWaypointScanWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#39;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSurvey201Response</returns>
        System.Threading.Tasks.Task<CreateSurvey201Response> CreateSurveyAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Create Survey
        /// </summary>
        /// <remarks>
        /// Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#39;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSurvey201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<CreateSurvey201Response>> CreateSurveyWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DockShip200Response</returns>
        System.Threading.Tasks.Task<DockShip200Response> DockShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dock Ship
        /// </summary>
        /// <remarks>
        /// Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DockShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<DockShip200Response>> DockShipWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="extractResourcesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractResources201Response</returns>
        System.Threading.Tasks.Task<ExtractResources201Response> ExtractResourcesAsync(string shipSymbol, ExtractResourcesRequest extractResourcesRequest = default(ExtractResourcesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Extract Resources
        /// </summary>
        /// <remarks>
        /// Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="extractResourcesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractResources201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtractResources201Response>> ExtractResourcesWithHttpInfoAsync(string shipSymbol, ExtractResourcesRequest extractResourcesRequest = default(ExtractResourcesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMounts200Response</returns>
        System.Threading.Tasks.Task<GetMounts200Response> GetMountsAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Mounts
        /// </summary>
        /// <remarks>
        /// Get the mounts installed on a ship.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMounts200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMounts200Response>> GetMountsWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyShip200Response</returns>
        System.Threading.Tasks.Task<GetMyShip200Response> GetMyShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ship
        /// </summary>
        /// <remarks>
        /// Retrieve the details of a ship under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMyShip200Response>> GetMyShipWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyShipCargo200Response</returns>
        System.Threading.Tasks.Task<GetMyShipCargo200Response> GetMyShipCargoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ship Cargo
        /// </summary>
        /// <remarks>
        /// Retrieve the cargo of a ship under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyShipCargo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMyShipCargo200Response>> GetMyShipCargoWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyShips200Response</returns>
        System.Threading.Tasks.Task<GetMyShips200Response> GetMyShipsAsync(int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// List Ships
        /// </summary>
        /// <remarks>
        /// Return a paginated list of all of ships under your agent&#39;s ownership.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyShips200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMyShips200Response>> GetMyShipsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipCooldown200Response</returns>
        System.Threading.Tasks.Task<GetShipCooldown200Response> GetShipCooldownAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ship Cooldown
        /// </summary>
        /// <remarks>
        /// Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipCooldown200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipCooldown200Response>> GetShipCooldownWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipNav200Response</returns>
        System.Threading.Tasks.Task<GetShipNav200Response> GetShipNavAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get Ship Nav
        /// </summary>
        /// <remarks>
        /// Get the current nav status of a ship.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipNav200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipNav200Response>> GetShipNavWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="installMountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallMount201Response</returns>
        System.Threading.Tasks.Task<InstallMount201Response> InstallMountAsync(string shipSymbol, InstallMountRequest installMountRequest = default(InstallMountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Install Mount
        /// </summary>
        /// <remarks>
        /// Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="installMountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallMount201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<InstallMount201Response>> InstallMountWithHttpInfoAsync(string shipSymbol, InstallMountRequest installMountRequest = default(InstallMountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship&#39;s cargo hold.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jettisonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jettison200Response</returns>
        System.Threading.Tasks.Task<Jettison200Response> JettisonAsync(string shipSymbol, JettisonRequest jettisonRequest = default(JettisonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Jettison Cargo
        /// </summary>
        /// <remarks>
        /// Jettison cargo from your ship&#39;s cargo hold.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jettisonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jettison200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Jettison200Response>> JettisonWithHttpInfoAsync(string shipSymbol, JettisonRequest jettisonRequest = default(JettisonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target system. The ship must be in orbit to use this function. When used while in orbit of a Jump Gate waypoint, any ship can use this command, jumping to the target system&#39;s Jump Gate waypoint.  When used elsewhere, jumping requires the ship to have a &#x60;Jump Drive&#x60; module installed and consumes a unit of antimatter from the ship&#39;s cargo. The command will fail if there is no antimatter to consume. When jumping via the &#x60;Jump Drive&#x60; module, the ship ends up at its largest source of energy in the system, such as a gas planet or a jump gate.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jumpShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JumpShip200Response</returns>
        System.Threading.Tasks.Task<JumpShip200Response> JumpShipAsync(string shipSymbol, JumpShipRequest jumpShipRequest = default(JumpShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Jump Ship
        /// </summary>
        /// <remarks>
        /// Jump your ship instantly to a target system. The ship must be in orbit to use this function. When used while in orbit of a Jump Gate waypoint, any ship can use this command, jumping to the target system&#39;s Jump Gate waypoint.  When used elsewhere, jumping requires the ship to have a &#x60;Jump Drive&#x60; module installed and consumes a unit of antimatter from the ship&#39;s cargo. The command will fail if there is no antimatter to consume. When jumping via the &#x60;Jump Drive&#x60; module, the ship ends up at its largest source of energy in the system, such as a gas planet or a jump gate.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jumpShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JumpShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<JumpShip200Response>> JumpShipWithHttpInfoAsync(string shipSymbol, JumpShipRequest jumpShipRequest = default(JumpShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#39;s current location. Navigating will consume the necessary fuel from the ship&#39;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s Warp or Jump actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NavigateShip200Response</returns>
        System.Threading.Tasks.Task<NavigateShip200Response> NavigateShipAsync(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Navigate Ship
        /// </summary>
        /// <remarks>
        /// Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#39;s current location. Navigating will consume the necessary fuel from the ship&#39;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s Warp or Jump actions.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NavigateShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<NavigateShip200Response>> NavigateShipWithHttpInfoAsync(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at a faction&#39;s HQ waypoint to negotiate a contract with that faction.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NegotiateContract200Response</returns>
        System.Threading.Tasks.Task<NegotiateContract200Response> NegotiateContractAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Negotiate Contract
        /// </summary>
        /// <remarks>
        /// Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at a faction&#39;s HQ waypoint to negotiate a contract with that faction.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NegotiateContract200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<NegotiateContract200Response>> NegotiateContractWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrbitShip200Response</returns>
        System.Threading.Tasks.Task<OrbitShip200Response> OrbitShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Orbit Ship
        /// </summary>
        /// <remarks>
        /// Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrbitShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<OrbitShip200Response>> OrbitShipWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="patchShipNavRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipNav200Response</returns>
        System.Threading.Tasks.Task<GetShipNav200Response> PatchShipNavAsync(string shipSymbol, PatchShipNavRequest patchShipNavRequest = default(PatchShipNavRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Patch Ship Nav
        /// </summary>
        /// <remarks>
        /// Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="patchShipNavRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipNav200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetShipNav200Response>> PatchShipNavWithHttpInfoAsync(string shipSymbol, PatchShipNavRequest patchShipNavRequest = default(PatchShipNavRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#39;s cargo hold.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="purchaseCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseCargo201Response</returns>
        System.Threading.Tasks.Task<PurchaseCargo201Response> PurchaseCargoAsync(string shipSymbol, PurchaseCargoRequest purchaseCargoRequest = default(PurchaseCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Purchase Cargo
        /// </summary>
        /// <remarks>
        /// Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#39;s cargo hold.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="purchaseCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseCargo201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseCargo201Response>> PurchaseCargoWithHttpInfoAsync(string shipSymbol, PurchaseCargoRequest purchaseCargoRequest = default(PurchaseCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#39;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseShip201Response</returns>
        System.Threading.Tasks.Task<PurchaseShip201Response> PurchaseShipAsync(PurchaseShipRequest purchaseShipRequest = default(PurchaseShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Purchase Ship
        /// </summary>
        /// <remarks>
        /// Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#39;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseShip201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<PurchaseShip201Response>> PurchaseShipWithHttpInfoAsync(PurchaseShipRequest purchaseShipRequest = default(PurchaseShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#39;s fuel.  Ships will always be refuel to their frame&#39;s maximum fuel capacity when using this action.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="refuelShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefuelShip200Response</returns>
        System.Threading.Tasks.Task<RefuelShip200Response> RefuelShipAsync(string shipSymbol, RefuelShipRequest refuelShipRequest = default(RefuelShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Refuel Ship
        /// </summary>
        /// <remarks>
        /// Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#39;s fuel.  Ships will always be refuel to their frame&#39;s maximum fuel capacity when using this action.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="refuelShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefuelShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RefuelShip200Response>> RefuelShipWithHttpInfoAsync(string shipSymbol, RefuelShipRequest refuelShipRequest = default(RefuelShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="removeMountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveMount201Response</returns>
        System.Threading.Tasks.Task<RemoveMount201Response> RemoveMountAsync(string shipSymbol, RemoveMountRequest removeMountRequest = default(RemoveMountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Remove Mount
        /// </summary>
        /// <remarks>
        /// Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="removeMountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveMount201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<RemoveMount201Response>> RemoveMountWithHttpInfoAsync(string shipSymbol, RemoveMountRequest removeMountRequest = default(RemoveMountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="sellCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SellCargo201Response</returns>
        System.Threading.Tasks.Task<SellCargo201Response> SellCargoAsync(string shipSymbol, SellCargoRequest sellCargoRequest = default(SellCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Sell Cargo
        /// </summary>
        /// <remarks>
        /// Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="sellCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SellCargo201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SellCargo201Response>> SellCargoWithHttpInfoAsync(string shipSymbol, SellCargoRequest sellCargoRequest = default(SellCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="shipRefineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipRefine201Response</returns>
        System.Threading.Tasks.Task<ShipRefine201Response> ShipRefineAsync(string shipSymbol, ShipRefineRequest shipRefineRequest = default(ShipRefineRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Ship Refine
        /// </summary>
        /// <remarks>
        /// Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="shipRefineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipRefine201Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<ShipRefine201Response>> ShipRefineWithHttpInfoAsync(string shipSymbol, ShipRefineRequest shipRefineRequest = default(ShipRefineRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#39;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#39;s symbol.</param>
        /// <param name="transferCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferCargo200Response</returns>
        System.Threading.Tasks.Task<TransferCargo200Response> TransferCargoAsync(string shipSymbol, TransferCargoRequest transferCargoRequest = default(TransferCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Transfer Cargo
        /// </summary>
        /// <remarks>
        /// Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#39;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#39;s symbol.</param>
        /// <param name="transferCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferCargo200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<TransferCargo200Response>> TransferCargoWithHttpInfoAsync(string shipSymbol, TransferCargoRequest transferCargoRequest = default(TransferCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#39;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NavigateShip200Response</returns>
        System.Threading.Tasks.Task<NavigateShip200Response> WarpShipAsync(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Warp Ship
        /// </summary>
        /// <remarks>
        /// Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#39;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </remarks>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NavigateShip200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<NavigateShip200Response>> WarpShipWithHttpInfoAsync(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFleetApi : IFleetApiSync, IFleetApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FleetApi : IDisposable, IFleetApi
    {
        private SpaceTradersUnitySDK.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public FleetApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public FleetApi(string basePath)
        {
            this.Configuration = SpaceTradersUnitySDK.Client.Configuration.MergeConfigurations(
                SpaceTradersUnitySDK.Client.GlobalConfiguration.Instance,
                new SpaceTradersUnitySDK.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new SpaceTradersUnitySDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = SpaceTradersUnitySDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public FleetApi(SpaceTradersUnitySDK.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SpaceTradersUnitySDK.Client.Configuration.MergeConfigurations(
                SpaceTradersUnitySDK.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new SpaceTradersUnitySDK.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = SpaceTradersUnitySDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FleetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public FleetApi(SpaceTradersUnitySDK.Client.ISynchronousClient client, SpaceTradersUnitySDK.Client.IAsynchronousClient asyncClient, SpaceTradersUnitySDK.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SpaceTradersUnitySDK.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public SpaceTradersUnitySDK.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SpaceTradersUnitySDK.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SpaceTradersUnitySDK.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SpaceTradersUnitySDK.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SpaceTradersUnitySDK.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create Chart Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#39;s traits.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>CreateChart201Response</returns>
        public CreateChart201Response CreateChart(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<CreateChart201Response> localVarResponse = CreateChartWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Chart Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#39;s traits.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of CreateChart201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<CreateChart201Response> CreateChartWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateChart");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateChart201Response>("/my/ships/{shipSymbol}/chart", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChart", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Chart Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#39;s traits.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateChart201Response</returns>
        public async System.Threading.Tasks.Task<CreateChart201Response> CreateChartAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateChartWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<CreateChart201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<CreateChart201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Chart Command a ship to chart the waypoint at its current location.  Most waypoints in the universe are uncharted by default. These waypoints have their traits hidden until they have been charted by a ship.  Charting a waypoint will record your agent as the one who created the chart, and all other agents would also be able to see the waypoint&#39;s traits.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateChart201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<CreateChart201Response>> CreateChartWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateChart");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CreateChart201Response>("/my/ships/{shipSymbol}/chart", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateChart", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan Ships Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>CreateShipShipScan201Response</returns>
        public CreateShipShipScan201Response CreateShipShipScan(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipShipScan201Response> localVarResponse = CreateShipShipScanWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Ships Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of CreateShipShipScan201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<CreateShipShipScan201Response> CreateShipShipScanWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipShipScan");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateShipShipScan201Response>("/my/ships/{shipSymbol}/scan/ships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipShipScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan Ships Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipShipScan201Response</returns>
        public async System.Threading.Tasks.Task<CreateShipShipScan201Response> CreateShipShipScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateShipShipScanWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipShipScan201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipShipScan201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Ships Scan for nearby ships, retrieving information for all ships in range.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipShipScan201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<CreateShipShipScan201Response>> CreateShipShipScanWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipShipScan");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CreateShipShipScan201Response>("/my/ships/{shipSymbol}/scan/ships", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipShipScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan Systems Scan for nearby systems, retrieving information on the systems&#39; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>CreateShipSystemScan201Response</returns>
        public CreateShipSystemScan201Response CreateShipSystemScan(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipSystemScan201Response> localVarResponse = CreateShipSystemScanWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Systems Scan for nearby systems, retrieving information on the systems&#39; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of CreateShipSystemScan201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<CreateShipSystemScan201Response> CreateShipSystemScanWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipSystemScan");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateShipSystemScan201Response>("/my/ships/{shipSymbol}/scan/systems", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipSystemScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan Systems Scan for nearby systems, retrieving information on the systems&#39; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipSystemScan201Response</returns>
        public async System.Threading.Tasks.Task<CreateShipSystemScan201Response> CreateShipSystemScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateShipSystemScanWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipSystemScan201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipSystemScan201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Systems Scan for nearby systems, retrieving information on the systems&#39; distance from the ship and their waypoints. Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipSystemScan201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<CreateShipSystemScan201Response>> CreateShipSystemScanWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipSystemScan");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CreateShipSystemScan201Response>("/my/ships/{shipSymbol}/scan/systems", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipSystemScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan Waypoints Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#39; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>CreateShipWaypointScan201Response</returns>
        public CreateShipWaypointScan201Response CreateShipWaypointScan(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipWaypointScan201Response> localVarResponse = CreateShipWaypointScanWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Waypoints Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#39; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of CreateShipWaypointScan201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<CreateShipWaypointScan201Response> CreateShipWaypointScanWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipWaypointScan");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateShipWaypointScan201Response>("/my/ships/{shipSymbol}/scan/waypoints", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipWaypointScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Scan Waypoints Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#39; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateShipWaypointScan201Response</returns>
        public async System.Threading.Tasks.Task<CreateShipWaypointScan201Response> CreateShipWaypointScanAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateShipWaypointScanWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipWaypointScan201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<CreateShipWaypointScan201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Scan Waypoints Scan for nearby waypoints, retrieving detailed information on each waypoint in range. Scanning uncharted waypoints will allow you to ignore their uncharted state and will list the waypoints&#39; traits.  Requires a ship to have the &#x60;Sensor Array&#x60; mount installed to use.  The ship will enter a cooldown after using this function, during which it cannot execute certain actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateShipWaypointScan201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<CreateShipWaypointScan201Response>> CreateShipWaypointScanWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateShipWaypointScan");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CreateShipWaypointScan201Response>("/my/ships/{shipSymbol}/scan/waypoints", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateShipWaypointScan", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Survey Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#39;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>CreateSurvey201Response</returns>
        public CreateSurvey201Response CreateSurvey(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<CreateSurvey201Response> localVarResponse = CreateSurveyWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Survey Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#39;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of CreateSurvey201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<CreateSurvey201Response> CreateSurveyWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateSurvey");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CreateSurvey201Response>("/my/ships/{shipSymbol}/survey", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSurvey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Survey Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#39;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CreateSurvey201Response</returns>
        public async System.Threading.Tasks.Task<CreateSurvey201Response> CreateSurveyAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = CreateSurveyWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<CreateSurvey201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<CreateSurvey201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Create Survey Create surveys on a waypoint that can be extracted such as asteroid fields. A survey focuses on specific types of deposits from the extracted location. When ships extract using this survey, they are guaranteed to procure a high amount of one of the goods in the survey.  In order to use a survey, send the entire survey details in the body of the extract request.  Each survey may have multiple deposits, and if a symbol shows up more than once, that indicates a higher chance of extracting that resource.  Your ship will enter a cooldown after surveying in which it is unable to perform certain actions. Surveys will eventually expire after a period of time or will be exhausted after being extracted several times based on the survey&#39;s size. Multiple ships can use the same survey for extraction.  A ship must have the &#x60;Surveyor&#x60; mount installed in order to use this function.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CreateSurvey201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<CreateSurvey201Response>> CreateSurveyWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->CreateSurvey");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<CreateSurvey201Response>("/my/ships/{shipSymbol}/survey", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateSurvey", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dock Ship Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>DockShip200Response</returns>
        public DockShip200Response DockShip(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<DockShip200Response> localVarResponse = DockShipWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dock Ship Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of DockShip200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<DockShip200Response> DockShipWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->DockShip");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<DockShip200Response>("/my/ships/{shipSymbol}/dock", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DockShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dock Ship Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of DockShip200Response</returns>
        public async System.Threading.Tasks.Task<DockShip200Response> DockShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = DockShipWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<DockShip200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<DockShip200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dock Ship Attempt to dock your ship at its current location. Docking will only succeed if your ship is capable of docking at the time of the request.  Docked ships can access elements in their current location, such as the market or a shipyard, but cannot do actions that require the ship to be above surface such as navigating or extracting.  The endpoint is idempotent - successive calls will succeed even if the ship is already docked.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (DockShip200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<DockShip200Response>> DockShipWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->DockShip");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<DockShip200Response>("/my/ships/{shipSymbol}/dock", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DockShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Resources Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="extractResourcesRequest"> (optional)</param>
        /// <returns>ExtractResources201Response</returns>
        public ExtractResources201Response ExtractResources(string shipSymbol, ExtractResourcesRequest extractResourcesRequest = default(ExtractResourcesRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<ExtractResources201Response> localVarResponse = ExtractResourcesWithHttpInfo(shipSymbol, extractResourcesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Resources Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="extractResourcesRequest"> (optional)</param>
        /// <returns>ApiResponse of ExtractResources201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<ExtractResources201Response> ExtractResourcesWithHttpInfo(string shipSymbol, ExtractResourcesRequest extractResourcesRequest = default(ExtractResourcesRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ExtractResources");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = extractResourcesRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ExtractResources201Response>("/my/ships/{shipSymbol}/extract", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractResources", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Extract Resources Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="extractResourcesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ExtractResources201Response</returns>
        public async System.Threading.Tasks.Task<ExtractResources201Response> ExtractResourcesAsync(string shipSymbol, ExtractResourcesRequest extractResourcesRequest = default(ExtractResourcesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ExtractResourcesWithHttpInfoAsync(shipSymbol, extractResourcesRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<ExtractResources201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<ExtractResources201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Extract Resources Extract resources from a waypoint that can be extracted, such as asteroid fields, into your ship. Send an optional survey as the payload to target specific yields.  The ship must be in orbit to be able to extract and must have mining equipments installed that can extract goods, such as the &#x60;Gas Siphon&#x60; mount for gas-based goods or &#x60;Mining Laser&#x60; mount for ore-based goods.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="extractResourcesRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ExtractResources201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<ExtractResources201Response>> ExtractResourcesWithHttpInfoAsync(string shipSymbol, ExtractResourcesRequest extractResourcesRequest = default(ExtractResourcesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ExtractResources");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = extractResourcesRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ExtractResources201Response>("/my/ships/{shipSymbol}/extract", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ExtractResources", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mounts Get the mounts installed on a ship.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <returns>GetMounts200Response</returns>
        public GetMounts200Response GetMounts(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<GetMounts200Response> localVarResponse = GetMountsWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mounts Get the mounts installed on a ship.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <returns>ApiResponse of GetMounts200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<GetMounts200Response> GetMountsWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMounts");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMounts200Response>("/my/ships/{shipSymbol}/mounts", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Mounts Get the mounts installed on a ship.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMounts200Response</returns>
        public async System.Threading.Tasks.Task<GetMounts200Response> GetMountsAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetMountsWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<GetMounts200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<GetMounts200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Mounts Get the mounts installed on a ship.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMounts200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<GetMounts200Response>> GetMountsWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMounts");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetMounts200Response>("/my/ships/{shipSymbol}/mounts", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMounts", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ship Retrieve the details of a ship under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>GetMyShip200Response</returns>
        public GetMyShip200Response GetMyShip(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShip200Response> localVarResponse = GetMyShipWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Retrieve the details of a ship under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of GetMyShip200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<GetMyShip200Response> GetMyShipWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMyShip");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMyShip200Response>("/my/ships/{shipSymbol}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ship Retrieve the details of a ship under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyShip200Response</returns>
        public async System.Threading.Tasks.Task<GetMyShip200Response> GetMyShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetMyShipWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShip200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShip200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Retrieve the details of a ship under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyShip200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<GetMyShip200Response>> GetMyShipWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMyShip");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetMyShip200Response>("/my/ships/{shipSymbol}", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ship Cargo Retrieve the cargo of a ship under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>GetMyShipCargo200Response</returns>
        public GetMyShipCargo200Response GetMyShipCargo(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShipCargo200Response> localVarResponse = GetMyShipCargoWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Cargo Retrieve the cargo of a ship under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of GetMyShipCargo200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<GetMyShipCargo200Response> GetMyShipCargoWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMyShipCargo");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMyShipCargo200Response>("/my/ships/{shipSymbol}/cargo", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyShipCargo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ship Cargo Retrieve the cargo of a ship under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyShipCargo200Response</returns>
        public async System.Threading.Tasks.Task<GetMyShipCargo200Response> GetMyShipCargoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetMyShipCargoWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShipCargo200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShipCargo200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Cargo Retrieve the cargo of a ship under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyShipCargo200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<GetMyShipCargo200Response>> GetMyShipCargoWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetMyShipCargo");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetMyShipCargo200Response>("/my/ships/{shipSymbol}/cargo", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyShipCargo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Ships Return a paginated list of all of ships under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>GetMyShips200Response</returns>
        public GetMyShips200Response GetMyShips(int? page = default(int?), int? limit = default(int?))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShips200Response> localVarResponse = GetMyShipsWithHttpInfo(page, limit);
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Ships Return a paginated list of all of ships under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <returns>ApiResponse of GetMyShips200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<GetMyShips200Response> GetMyShipsWithHttpInfo(int? page = default(int?), int? limit = default(int?))
        {
            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTradersUnitySDK.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTradersUnitySDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMyShips200Response>("/my/ships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyShips", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List Ships Return a paginated list of all of ships under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMyShips200Response</returns>
        public async System.Threading.Tasks.Task<GetMyShips200Response> GetMyShipsAsync(int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetMyShipsWithHttpInfoAsync(page, limit, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShips200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<GetMyShips200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// List Ships Return a paginated list of all of ships under your agent&#39;s ownership.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">What entry offset to request (optional, default to 1)</param>
        /// <param name="limit">How many entries to return per page (optional, default to 10)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMyShips200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<GetMyShips200Response>> GetMyShipsWithHttpInfoAsync(int? page = default(int?), int? limit = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTradersUnitySDK.Client.ClientUtils.ParameterToMultiMap("", "page", page));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(SpaceTradersUnitySDK.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetMyShips200Response>("/my/ships", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetMyShips", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ship Cooldown Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>GetShipCooldown200Response</returns>
        public GetShipCooldown200Response GetShipCooldown(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipCooldown200Response> localVarResponse = GetShipCooldownWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Cooldown Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of GetShipCooldown200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<GetShipCooldown200Response> GetShipCooldownWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipCooldown");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetShipCooldown200Response>("/my/ships/{shipSymbol}/cooldown", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipCooldown", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ship Cooldown Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipCooldown200Response</returns>
        public async System.Threading.Tasks.Task<GetShipCooldown200Response> GetShipCooldownAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetShipCooldownWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipCooldown200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipCooldown200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Cooldown Retrieve the details of your ship&#39;s reactor cooldown. Some actions such as activating your jump drive, scanning, or extracting resources taxes your reactor and results in a cooldown.  Your ship cannot perform additional actions until your cooldown has expired. The duration of your cooldown is relative to the power consumption of the related modules or mounts for the action taken.  Response returns a 204 status code (no-content) when the ship has no cooldown.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipCooldown200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<GetShipCooldown200Response>> GetShipCooldownWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipCooldown");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetShipCooldown200Response>("/my/ships/{shipSymbol}/cooldown", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipCooldown", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ship Nav Get the current nav status of a ship.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>GetShipNav200Response</returns>
        public GetShipNav200Response GetShipNav(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response> localVarResponse = GetShipNavWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Nav Get the current nav status of a ship.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <returns>ApiResponse of GetShipNav200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response> GetShipNavWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipNav");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetShipNav200Response>("/my/ships/{shipSymbol}/nav", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipNav", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Ship Nav Get the current nav status of a ship.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipNav200Response</returns>
        public async System.Threading.Tasks.Task<GetShipNav200Response> GetShipNavAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = GetShipNavWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Ship Nav Get the current nav status of a ship.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipNav200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response>> GetShipNavWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->GetShipNav");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.GetAsync<GetShipNav200Response>("/my/ships/{shipSymbol}/nav", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetShipNav", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install Mount Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="installMountRequest"> (optional)</param>
        /// <returns>InstallMount201Response</returns>
        public InstallMount201Response InstallMount(string shipSymbol, InstallMountRequest installMountRequest = default(InstallMountRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<InstallMount201Response> localVarResponse = InstallMountWithHttpInfo(shipSymbol, installMountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install Mount Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="installMountRequest"> (optional)</param>
        /// <returns>ApiResponse of InstallMount201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<InstallMount201Response> InstallMountWithHttpInfo(string shipSymbol, InstallMountRequest installMountRequest = default(InstallMountRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->InstallMount");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = installMountRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<InstallMount201Response>("/my/ships/{shipSymbol}/mounts/install", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallMount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Install Mount Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="installMountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InstallMount201Response</returns>
        public async System.Threading.Tasks.Task<InstallMount201Response> InstallMountAsync(string shipSymbol, InstallMountRequest installMountRequest = default(InstallMountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = InstallMountWithHttpInfoAsync(shipSymbol, installMountRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<InstallMount201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<InstallMount201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Install Mount Install a mount on a ship.  In order to install a mount, the ship must be docked and located in a waypoint that has a &#x60;Shipyard&#x60; trait. The ship also must have the mount to install in its cargo hold.  An installation fee will be deduced by the Shipyard for installing the mount on the ship. 
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="installMountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InstallMount201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<InstallMount201Response>> InstallMountWithHttpInfoAsync(string shipSymbol, InstallMountRequest installMountRequest = default(InstallMountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->InstallMount");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = installMountRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<InstallMount201Response>("/my/ships/{shipSymbol}/mounts/install", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("InstallMount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Jettison Cargo Jettison cargo from your ship&#39;s cargo hold.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jettisonRequest"> (optional)</param>
        /// <returns>Jettison200Response</returns>
        public Jettison200Response Jettison(string shipSymbol, JettisonRequest jettisonRequest = default(JettisonRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<Jettison200Response> localVarResponse = JettisonWithHttpInfo(shipSymbol, jettisonRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Jettison Cargo Jettison cargo from your ship&#39;s cargo hold.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jettisonRequest"> (optional)</param>
        /// <returns>ApiResponse of Jettison200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<Jettison200Response> JettisonWithHttpInfo(string shipSymbol, JettisonRequest jettisonRequest = default(JettisonRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->Jettison");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = jettisonRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Jettison200Response>("/my/ships/{shipSymbol}/jettison", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Jettison", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Jettison Cargo Jettison cargo from your ship&#39;s cargo hold.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jettisonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Jettison200Response</returns>
        public async System.Threading.Tasks.Task<Jettison200Response> JettisonAsync(string shipSymbol, JettisonRequest jettisonRequest = default(JettisonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = JettisonWithHttpInfoAsync(shipSymbol, jettisonRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<Jettison200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<Jettison200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Jettison Cargo Jettison cargo from your ship&#39;s cargo hold.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jettisonRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Jettison200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<Jettison200Response>> JettisonWithHttpInfoAsync(string shipSymbol, JettisonRequest jettisonRequest = default(JettisonRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->Jettison");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = jettisonRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<Jettison200Response>("/my/ships/{shipSymbol}/jettison", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("Jettison", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Jump Ship Jump your ship instantly to a target system. The ship must be in orbit to use this function. When used while in orbit of a Jump Gate waypoint, any ship can use this command, jumping to the target system&#39;s Jump Gate waypoint.  When used elsewhere, jumping requires the ship to have a &#x60;Jump Drive&#x60; module installed and consumes a unit of antimatter from the ship&#39;s cargo. The command will fail if there is no antimatter to consume. When jumping via the &#x60;Jump Drive&#x60; module, the ship ends up at its largest source of energy in the system, such as a gas planet or a jump gate.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jumpShipRequest"> (optional)</param>
        /// <returns>JumpShip200Response</returns>
        public JumpShip200Response JumpShip(string shipSymbol, JumpShipRequest jumpShipRequest = default(JumpShipRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<JumpShip200Response> localVarResponse = JumpShipWithHttpInfo(shipSymbol, jumpShipRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Jump Ship Jump your ship instantly to a target system. The ship must be in orbit to use this function. When used while in orbit of a Jump Gate waypoint, any ship can use this command, jumping to the target system&#39;s Jump Gate waypoint.  When used elsewhere, jumping requires the ship to have a &#x60;Jump Drive&#x60; module installed and consumes a unit of antimatter from the ship&#39;s cargo. The command will fail if there is no antimatter to consume. When jumping via the &#x60;Jump Drive&#x60; module, the ship ends up at its largest source of energy in the system, such as a gas planet or a jump gate.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jumpShipRequest"> (optional)</param>
        /// <returns>ApiResponse of JumpShip200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<JumpShip200Response> JumpShipWithHttpInfo(string shipSymbol, JumpShipRequest jumpShipRequest = default(JumpShipRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->JumpShip");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = jumpShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<JumpShip200Response>("/my/ships/{shipSymbol}/jump", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JumpShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Jump Ship Jump your ship instantly to a target system. The ship must be in orbit to use this function. When used while in orbit of a Jump Gate waypoint, any ship can use this command, jumping to the target system&#39;s Jump Gate waypoint.  When used elsewhere, jumping requires the ship to have a &#x60;Jump Drive&#x60; module installed and consumes a unit of antimatter from the ship&#39;s cargo. The command will fail if there is no antimatter to consume. When jumping via the &#x60;Jump Drive&#x60; module, the ship ends up at its largest source of energy in the system, such as a gas planet or a jump gate.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jumpShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of JumpShip200Response</returns>
        public async System.Threading.Tasks.Task<JumpShip200Response> JumpShipAsync(string shipSymbol, JumpShipRequest jumpShipRequest = default(JumpShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = JumpShipWithHttpInfoAsync(shipSymbol, jumpShipRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<JumpShip200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<JumpShip200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Jump Ship Jump your ship instantly to a target system. The ship must be in orbit to use this function. When used while in orbit of a Jump Gate waypoint, any ship can use this command, jumping to the target system&#39;s Jump Gate waypoint.  When used elsewhere, jumping requires the ship to have a &#x60;Jump Drive&#x60; module installed and consumes a unit of antimatter from the ship&#39;s cargo. The command will fail if there is no antimatter to consume. When jumping via the &#x60;Jump Drive&#x60; module, the ship ends up at its largest source of energy in the system, such as a gas planet or a jump gate.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="jumpShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (JumpShip200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<JumpShip200Response>> JumpShipWithHttpInfoAsync(string shipSymbol, JumpShipRequest jumpShipRequest = default(JumpShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->JumpShip");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = jumpShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<JumpShip200Response>("/my/ships/{shipSymbol}/jump", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("JumpShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Navigate Ship Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#39;s current location. Navigating will consume the necessary fuel from the ship&#39;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s Warp or Jump actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <returns>NavigateShip200Response</returns>
        public NavigateShip200Response NavigateShip(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response> localVarResponse = NavigateShipWithHttpInfo(shipSymbol, navigateShipRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Navigate Ship Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#39;s current location. Navigating will consume the necessary fuel from the ship&#39;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s Warp or Jump actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <returns>ApiResponse of NavigateShip200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response> NavigateShipWithHttpInfo(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->NavigateShip");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = navigateShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NavigateShip200Response>("/my/ships/{shipSymbol}/navigate", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigateShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Navigate Ship Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#39;s current location. Navigating will consume the necessary fuel from the ship&#39;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s Warp or Jump actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NavigateShip200Response</returns>
        public async System.Threading.Tasks.Task<NavigateShip200Response> NavigateShipAsync(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = NavigateShipWithHttpInfoAsync(shipSymbol, navigateShipRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Navigate Ship Navigate to a target destination. The ship must be in orbit to use this function. The destination waypoint must be within the same system as the ship&#39;s current location. Navigating will consume the necessary fuel from the ship&#39;s manifest based on the distance to the target waypoint.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at it&#39;s destination.  To travel between systems, see the ship&#39;s Warp or Jump actions.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NavigateShip200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response>> NavigateShipWithHttpInfoAsync(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->NavigateShip");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = navigateShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<NavigateShip200Response>("/my/ships/{shipSymbol}/navigate", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NavigateShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Negotiate Contract Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at a faction&#39;s HQ waypoint to negotiate a contract with that faction.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <returns>NegotiateContract200Response</returns>
        public NegotiateContract200Response NegotiateContract(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<NegotiateContract200Response> localVarResponse = NegotiateContractWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Negotiate Contract Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at a faction&#39;s HQ waypoint to negotiate a contract with that faction.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <returns>ApiResponse of NegotiateContract200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<NegotiateContract200Response> NegotiateContractWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->NegotiateContract");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NegotiateContract200Response>("/my/ships/{shipSymbol}/negotiate/contract", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NegotiateContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Negotiate Contract Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at a faction&#39;s HQ waypoint to negotiate a contract with that faction.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NegotiateContract200Response</returns>
        public async System.Threading.Tasks.Task<NegotiateContract200Response> NegotiateContractAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = NegotiateContractWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<NegotiateContract200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<NegotiateContract200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Negotiate Contract Negotiate a new contract with the HQ.  In order to negotiate a new contract, an agent must not have ongoing or offered contracts over the allowed maximum amount. Currently the maximum contracts an agent can have at a time is 1.  Once a contract is negotiated, it is added to the list of contracts offered to the agent, which the agent can then accept.   The ship must be present at a faction&#39;s HQ waypoint to negotiate a contract with that faction.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NegotiateContract200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<NegotiateContract200Response>> NegotiateContractWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->NegotiateContract");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<NegotiateContract200Response>("/my/ships/{shipSymbol}/negotiate/contract", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NegotiateContract", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Orbit Ship Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>OrbitShip200Response</returns>
        public OrbitShip200Response OrbitShip(string shipSymbol)
        {
            SpaceTradersUnitySDK.Client.ApiResponse<OrbitShip200Response> localVarResponse = OrbitShipWithHttpInfo(shipSymbol);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Orbit Ship Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <returns>ApiResponse of OrbitShip200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<OrbitShip200Response> OrbitShipWithHttpInfo(string shipSymbol)
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->OrbitShip");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<OrbitShip200Response>("/my/ships/{shipSymbol}/orbit", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrbitShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Orbit Ship Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OrbitShip200Response</returns>
        public async System.Threading.Tasks.Task<OrbitShip200Response> OrbitShipAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = OrbitShipWithHttpInfoAsync(shipSymbol, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<OrbitShip200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<OrbitShip200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Orbit Ship Attempt to move your ship into orbit at its current location. The request will only succeed if your ship is capable of moving into orbit at the time of the request.  Orbiting ships are able to do actions that require the ship to be above surface such as navigating or extracting, but cannot access elements in their current waypoint, such as the market or a shipyard.  The endpoint is idempotent - successive calls will succeed even if the ship is already in orbit.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OrbitShip200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<OrbitShip200Response>> OrbitShipWithHttpInfoAsync(string shipSymbol, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->OrbitShip");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<OrbitShip200Response>("/my/ships/{shipSymbol}/orbit", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OrbitShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch Ship Nav Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="patchShipNavRequest"> (optional)</param>
        /// <returns>GetShipNav200Response</returns>
        public GetShipNav200Response PatchShipNav(string shipSymbol, PatchShipNavRequest patchShipNavRequest = default(PatchShipNavRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response> localVarResponse = PatchShipNavWithHttpInfo(shipSymbol, patchShipNavRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch Ship Nav Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="patchShipNavRequest"> (optional)</param>
        /// <returns>ApiResponse of GetShipNav200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response> PatchShipNavWithHttpInfo(string shipSymbol, PatchShipNavRequest patchShipNavRequest = default(PatchShipNavRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->PatchShipNav");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = patchShipNavRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<GetShipNav200Response>("/my/ships/{shipSymbol}/nav", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchShipNav", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch Ship Nav Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="patchShipNavRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetShipNav200Response</returns>
        public async System.Threading.Tasks.Task<GetShipNav200Response> PatchShipNavAsync(string shipSymbol, PatchShipNavRequest patchShipNavRequest = default(PatchShipNavRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PatchShipNavWithHttpInfoAsync(shipSymbol, patchShipNavRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch Ship Nav Update the nav configuration of a ship.  Currently only supports configuring the Flight Mode of the ship, which affects its speed and fuel consumption.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="patchShipNavRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetShipNav200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<GetShipNav200Response>> PatchShipNavWithHttpInfoAsync(string shipSymbol, PatchShipNavRequest patchShipNavRequest = default(PatchShipNavRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->PatchShipNav");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = patchShipNavRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PatchAsync<GetShipNav200Response>("/my/ships/{shipSymbol}/nav", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchShipNav", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purchase Cargo Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#39;s cargo hold.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="purchaseCargoRequest"> (optional)</param>
        /// <returns>PurchaseCargo201Response</returns>
        public PurchaseCargo201Response PurchaseCargo(string shipSymbol, PurchaseCargoRequest purchaseCargoRequest = default(PurchaseCargoRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<PurchaseCargo201Response> localVarResponse = PurchaseCargoWithHttpInfo(shipSymbol, purchaseCargoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Cargo Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#39;s cargo hold.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="purchaseCargoRequest"> (optional)</param>
        /// <returns>ApiResponse of PurchaseCargo201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<PurchaseCargo201Response> PurchaseCargoWithHttpInfo(string shipSymbol, PurchaseCargoRequest purchaseCargoRequest = default(PurchaseCargoRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->PurchaseCargo");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = purchaseCargoRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PurchaseCargo201Response>("/my/ships/{shipSymbol}/purchase", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurchaseCargo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purchase Cargo Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#39;s cargo hold.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="purchaseCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseCargo201Response</returns>
        public async System.Threading.Tasks.Task<PurchaseCargo201Response> PurchaseCargoAsync(string shipSymbol, PurchaseCargoRequest purchaseCargoRequest = default(PurchaseCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PurchaseCargoWithHttpInfoAsync(shipSymbol, purchaseCargoRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<PurchaseCargo201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<PurchaseCargo201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Cargo Purchase cargo from a market.  The ship must be docked in a waypoint that has &#x60;Marketplace&#x60; trait, and the market must be selling a good to be able to purchase it.  The maximum amount of units of a good that can be purchased in each transaction are denoted by the &#x60;tradeVolume&#x60; value of the good, which can be viewed by using the Get Market action.  Purchased goods are added to the ship&#39;s cargo hold.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="purchaseCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseCargo201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<PurchaseCargo201Response>> PurchaseCargoWithHttpInfoAsync(string shipSymbol, PurchaseCargoRequest purchaseCargoRequest = default(PurchaseCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->PurchaseCargo");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = purchaseCargoRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<PurchaseCargo201Response>("/my/ships/{shipSymbol}/purchase", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurchaseCargo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purchase Ship Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#39;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseShipRequest"> (optional)</param>
        /// <returns>PurchaseShip201Response</returns>
        public PurchaseShip201Response PurchaseShip(PurchaseShipRequest purchaseShipRequest = default(PurchaseShipRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<PurchaseShip201Response> localVarResponse = PurchaseShipWithHttpInfo(purchaseShipRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Ship Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#39;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseShipRequest"> (optional)</param>
        /// <returns>ApiResponse of PurchaseShip201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<PurchaseShip201Response> PurchaseShipWithHttpInfo(PurchaseShipRequest purchaseShipRequest = default(PurchaseShipRequest))
        {
            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = purchaseShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<PurchaseShip201Response>("/my/ships", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurchaseShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Purchase Ship Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#39;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PurchaseShip201Response</returns>
        public async System.Threading.Tasks.Task<PurchaseShip201Response> PurchaseShipAsync(PurchaseShipRequest purchaseShipRequest = default(PurchaseShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = PurchaseShipWithHttpInfoAsync(purchaseShipRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<PurchaseShip201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<PurchaseShip201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Purchase Ship Purchase a ship from a Shipyard. In order to use this function, a ship under your agent&#39;s ownership must be in a waypoint that has the &#x60;Shipyard&#x60; trait, and the Shipyard must sell the type of the desired ship.  Shipyards typically offer ship types, which are predefined templates of ships that have dedicated roles. A template comes with a preset of an engine, a reactor, and a frame. It may also include a few modules and mounts.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="purchaseShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PurchaseShip201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<PurchaseShip201Response>> PurchaseShipWithHttpInfoAsync(PurchaseShipRequest purchaseShipRequest = default(PurchaseShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = purchaseShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<PurchaseShip201Response>("/my/ships", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PurchaseShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refuel Ship Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#39;s fuel.  Ships will always be refuel to their frame&#39;s maximum fuel capacity when using this action.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="refuelShipRequest"> (optional)</param>
        /// <returns>RefuelShip200Response</returns>
        public RefuelShip200Response RefuelShip(string shipSymbol, RefuelShipRequest refuelShipRequest = default(RefuelShipRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<RefuelShip200Response> localVarResponse = RefuelShipWithHttpInfo(shipSymbol, refuelShipRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refuel Ship Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#39;s fuel.  Ships will always be refuel to their frame&#39;s maximum fuel capacity when using this action.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="refuelShipRequest"> (optional)</param>
        /// <returns>ApiResponse of RefuelShip200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<RefuelShip200Response> RefuelShipWithHttpInfo(string shipSymbol, RefuelShipRequest refuelShipRequest = default(RefuelShipRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RefuelShip");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = refuelShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RefuelShip200Response>("/my/ships/{shipSymbol}/refuel", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefuelShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Refuel Ship Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#39;s fuel.  Ships will always be refuel to their frame&#39;s maximum fuel capacity when using this action.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="refuelShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RefuelShip200Response</returns>
        public async System.Threading.Tasks.Task<RefuelShip200Response> RefuelShipAsync(string shipSymbol, RefuelShipRequest refuelShipRequest = default(RefuelShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RefuelShipWithHttpInfoAsync(shipSymbol, refuelShipRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<RefuelShip200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<RefuelShip200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Refuel Ship Refuel your ship by buying fuel from the local market.  Requires the ship to be docked in a waypoint that has the &#x60;Marketplace&#x60; trait, and the market must be selling fuel in order to refuel.  Each fuel bought from the market replenishes 100 units in your ship&#39;s fuel.  Ships will always be refuel to their frame&#39;s maximum fuel capacity when using this action.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="refuelShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RefuelShip200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<RefuelShip200Response>> RefuelShipWithHttpInfoAsync(string shipSymbol, RefuelShipRequest refuelShipRequest = default(RefuelShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RefuelShip");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = refuelShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RefuelShip200Response>("/my/ships/{shipSymbol}/refuel", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RefuelShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Mount Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="removeMountRequest"> (optional)</param>
        /// <returns>RemoveMount201Response</returns>
        public RemoveMount201Response RemoveMount(string shipSymbol, RemoveMountRequest removeMountRequest = default(RemoveMountRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<RemoveMount201Response> localVarResponse = RemoveMountWithHttpInfo(shipSymbol, removeMountRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Mount Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="removeMountRequest"> (optional)</param>
        /// <returns>ApiResponse of RemoveMount201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<RemoveMount201Response> RemoveMountWithHttpInfo(string shipSymbol, RemoveMountRequest removeMountRequest = default(RemoveMountRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RemoveMount");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = removeMountRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<RemoveMount201Response>("/my/ships/{shipSymbol}/mounts/remove", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove Mount Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="removeMountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RemoveMount201Response</returns>
        public async System.Threading.Tasks.Task<RemoveMount201Response> RemoveMountAsync(string shipSymbol, RemoveMountRequest removeMountRequest = default(RemoveMountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = RemoveMountWithHttpInfoAsync(shipSymbol, removeMountRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<RemoveMount201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<RemoveMount201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Remove Mount Remove a mount from a ship.  The ship must be docked in a waypoint that has the &#x60;Shipyard&#x60; trait, and must have the desired mount that it wish to remove installed.  A removal fee will be deduced from the agent by the Shipyard.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship&#39;s symbol.</param>
        /// <param name="removeMountRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RemoveMount201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<RemoveMount201Response>> RemoveMountWithHttpInfoAsync(string shipSymbol, RemoveMountRequest removeMountRequest = default(RemoveMountRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->RemoveMount");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = removeMountRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<RemoveMount201Response>("/my/ships/{shipSymbol}/mounts/remove", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RemoveMount", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sell Cargo Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="sellCargoRequest"> (optional)</param>
        /// <returns>SellCargo201Response</returns>
        public SellCargo201Response SellCargo(string shipSymbol, SellCargoRequest sellCargoRequest = default(SellCargoRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<SellCargo201Response> localVarResponse = SellCargoWithHttpInfo(shipSymbol, sellCargoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sell Cargo Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="sellCargoRequest"> (optional)</param>
        /// <returns>ApiResponse of SellCargo201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<SellCargo201Response> SellCargoWithHttpInfo(string shipSymbol, SellCargoRequest sellCargoRequest = default(SellCargoRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->SellCargo");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = sellCargoRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SellCargo201Response>("/my/ships/{shipSymbol}/sell", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SellCargo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Sell Cargo Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="sellCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SellCargo201Response</returns>
        public async System.Threading.Tasks.Task<SellCargo201Response> SellCargoAsync(string shipSymbol, SellCargoRequest sellCargoRequest = default(SellCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = SellCargoWithHttpInfoAsync(shipSymbol, sellCargoRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<SellCargo201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<SellCargo201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Sell Cargo Sell cargo in your ship to a market that trades this cargo. The ship must be docked in a waypoint that has the &#x60;Marketplace&#x60; trait in order to use this function.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">Symbol of a ship.</param>
        /// <param name="sellCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SellCargo201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<SellCargo201Response>> SellCargoWithHttpInfoAsync(string shipSymbol, SellCargoRequest sellCargoRequest = default(SellCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->SellCargo");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = sellCargoRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<SellCargo201Response>("/my/ships/{shipSymbol}/sell", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SellCargo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ship Refine Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="shipRefineRequest"> (optional)</param>
        /// <returns>ShipRefine201Response</returns>
        public ShipRefine201Response ShipRefine(string shipSymbol, ShipRefineRequest shipRefineRequest = default(ShipRefineRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<ShipRefine201Response> localVarResponse = ShipRefineWithHttpInfo(shipSymbol, shipRefineRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ship Refine Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="shipRefineRequest"> (optional)</param>
        /// <returns>ApiResponse of ShipRefine201Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<ShipRefine201Response> ShipRefineWithHttpInfo(string shipSymbol, ShipRefineRequest shipRefineRequest = default(ShipRefineRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ShipRefine");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = shipRefineRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<ShipRefine201Response>("/my/ships/{shipSymbol}/refine", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipRefine", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Ship Refine Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="shipRefineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ShipRefine201Response</returns>
        public async System.Threading.Tasks.Task<ShipRefine201Response> ShipRefineAsync(string shipSymbol, ShipRefineRequest shipRefineRequest = default(ShipRefineRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = ShipRefineWithHttpInfoAsync(shipSymbol, shipRefineRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<ShipRefine201Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<ShipRefine201Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Ship Refine Attempt to refine the raw materials on your ship. The request will only succeed if your ship is capable of refining at the time of the request. In order to be able to refine, a ship must have goods that can be refined and have installed a &#x60;Refinery&#x60; module that can refine it.  When refining, 30 basic goods will be converted into 10 processed goods.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The symbol of the ship.</param>
        /// <param name="shipRefineRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ShipRefine201Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<ShipRefine201Response>> ShipRefineWithHttpInfoAsync(string shipSymbol, ShipRefineRequest shipRefineRequest = default(ShipRefineRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->ShipRefine");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = shipRefineRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<ShipRefine201Response>("/my/ships/{shipSymbol}/refine", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ShipRefine", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer Cargo Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#39;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#39;s symbol.</param>
        /// <param name="transferCargoRequest"> (optional)</param>
        /// <returns>TransferCargo200Response</returns>
        public TransferCargo200Response TransferCargo(string shipSymbol, TransferCargoRequest transferCargoRequest = default(TransferCargoRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<TransferCargo200Response> localVarResponse = TransferCargoWithHttpInfo(shipSymbol, transferCargoRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Cargo Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#39;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#39;s symbol.</param>
        /// <param name="transferCargoRequest"> (optional)</param>
        /// <returns>ApiResponse of TransferCargo200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<TransferCargo200Response> TransferCargoWithHttpInfo(string shipSymbol, TransferCargoRequest transferCargoRequest = default(TransferCargoRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->TransferCargo");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = transferCargoRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<TransferCargo200Response>("/my/ships/{shipSymbol}/transfer", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferCargo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Transfer Cargo Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#39;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#39;s symbol.</param>
        /// <param name="transferCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of TransferCargo200Response</returns>
        public async System.Threading.Tasks.Task<TransferCargo200Response> TransferCargoAsync(string shipSymbol, TransferCargoRequest transferCargoRequest = default(TransferCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = TransferCargoWithHttpInfoAsync(shipSymbol, transferCargoRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<TransferCargo200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<TransferCargo200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Transfer Cargo Transfer cargo between ships.  The receiving ship must be in the same waypoint as the transferring ship, and it must able to hold the additional cargo after the transfer is complete. Both ships also must be in the same state, either both are docked or both are orbiting.  The response body&#39;s cargo shows the cargo of the transferring ship after the transfer is complete.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The transferring ship&#39;s symbol.</param>
        /// <param name="transferCargoRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (TransferCargo200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<TransferCargo200Response>> TransferCargoWithHttpInfoAsync(string shipSymbol, TransferCargoRequest transferCargoRequest = default(TransferCargoRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->TransferCargo");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = transferCargoRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<TransferCargo200Response>("/my/ships/{shipSymbol}/transfer", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("TransferCargo", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Warp Ship Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#39;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <returns>NavigateShip200Response</returns>
        public NavigateShip200Response WarpShip(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest))
        {
            SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response> localVarResponse = WarpShipWithHttpInfo(shipSymbol, navigateShipRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Warp Ship Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#39;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <returns>ApiResponse of NavigateShip200Response</returns>
        public SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response> WarpShipWithHttpInfo(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->WarpShip");

            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = navigateShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<NavigateShip200Response>("/my/ships/{shipSymbol}/warp", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WarpShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Warp Ship Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#39;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NavigateShip200Response</returns>
        public async System.Threading.Tasks.Task<NavigateShip200Response> WarpShipAsync(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            var task = WarpShipWithHttpInfoAsync(shipSymbol, navigateShipRequest, cancellationToken);
#if UNITY_EDITOR || !UNITY_WEBGL
            SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response> localVarResponse = await task.ConfigureAwait(false);
#else
            SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response> localVarResponse = await task;
#endif
            return localVarResponse.Data;
        }

        /// <summary>
        /// Warp Ship Warp your ship to a target destination in another system. The ship must be in orbit to use this function and must have the &#x60;Warp Drive&#x60; module installed. Warping will consume the necessary fuel from the ship&#39;s manifest.  The returned response will detail the route information including the expected time of arrival. Most ship actions are unavailable until the ship has arrived at its destination.
        /// </summary>
        /// <exception cref="SpaceTradersUnitySDK.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="shipSymbol">The ship symbol.</param>
        /// <param name="navigateShipRequest"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NavigateShip200Response)</returns>
        public async System.Threading.Tasks.Task<SpaceTradersUnitySDK.Client.ApiResponse<NavigateShip200Response>> WarpShipWithHttpInfoAsync(string shipSymbol, NavigateShipRequest navigateShipRequest = default(NavigateShipRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'shipSymbol' is set
            if (shipSymbol == null)
                throw new SpaceTradersUnitySDK.Client.ApiException(400, "Missing required parameter 'shipSymbol' when calling FleetApi->WarpShip");


            SpaceTradersUnitySDK.Client.RequestOptions localVarRequestOptions = new SpaceTradersUnitySDK.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };


            var localVarContentType = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = SpaceTradersUnitySDK.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("shipSymbol", SpaceTradersUnitySDK.Client.ClientUtils.ParameterToString(shipSymbol)); // path parameter
            localVarRequestOptions.Data = navigateShipRequest;

            // authentication (AgentToken) required
            // bearer authentication required
            if (!string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
            }

            // make the HTTP request

            var task = this.AsynchronousClient.PostAsync<NavigateShip200Response>("/my/ships/{shipSymbol}/warp", localVarRequestOptions, this.Configuration, cancellationToken);

#if UNITY_EDITOR || !UNITY_WEBGL
            var localVarResponse = await task.ConfigureAwait(false);
#else
            var localVarResponse = await task;
#endif

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("WarpShip", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
