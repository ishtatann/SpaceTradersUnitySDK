/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// Faction details.
    /// </summary>
    [DataContract(Name = "Faction")]
    public partial class Faction : IEquatable<Faction>
    {

        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public FactionSymbol Symbol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Faction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Faction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Faction" /> class.
        /// </summary>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="name">Name of the faction. (required).</param>
        /// <param name="description">Description of the faction. (required).</param>
        /// <param name="headquarters">The waypoint in which the faction&#39;s HQ is located in. (required).</param>
        /// <param name="traits">List of traits that define this faction. (required).</param>
        /// <param name="isRecruiting">Whether or not the faction is currently recruiting new agents. (required).</param>
        public Faction(FactionSymbol symbol = default(FactionSymbol), string name = default(string), string description = default(string), string headquarters = default(string), List<FactionTrait> traits = default(List<FactionTrait>), bool isRecruiting = default(bool))
        {
            this.Symbol = symbol;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for Faction and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Faction and cannot be null");
            }
            this.Description = description;
            // to ensure "headquarters" is required (not null)
            if (headquarters == null)
            {
                throw new ArgumentNullException("headquarters is a required property for Faction and cannot be null");
            }
            this.Headquarters = headquarters;
            // to ensure "traits" is required (not null)
            if (traits == null)
            {
                throw new ArgumentNullException("traits is a required property for Faction and cannot be null");
            }
            this.Traits = traits;
            this.IsRecruiting = isRecruiting;
        }

        /// <summary>
        /// Name of the faction.
        /// </summary>
        /// <value>Name of the faction.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Description of the faction.
        /// </summary>
        /// <value>Description of the faction.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// The waypoint in which the faction&#39;s HQ is located in.
        /// </summary>
        /// <value>The waypoint in which the faction&#39;s HQ is located in.</value>
        [DataMember(Name = "headquarters", IsRequired = true, EmitDefaultValue = true)]
        public string Headquarters { get; set; }

        /// <summary>
        /// List of traits that define this faction.
        /// </summary>
        /// <value>List of traits that define this faction.</value>
        [DataMember(Name = "traits", IsRequired = true, EmitDefaultValue = true)]
        public List<FactionTrait> Traits { get; set; }

        /// <summary>
        /// Whether or not the faction is currently recruiting new agents.
        /// </summary>
        /// <value>Whether or not the faction is currently recruiting new agents.</value>
        [DataMember(Name = "isRecruiting", IsRequired = true, EmitDefaultValue = true)]
        public bool IsRecruiting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Faction {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Headquarters: ").Append(Headquarters).Append("\n");
            sb.Append("  Traits: ").Append(Traits).Append("\n");
            sb.Append("  IsRecruiting: ").Append(IsRecruiting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Faction);
        }

        /// <summary>
        /// Returns true if Faction instances are equal
        /// </summary>
        /// <param name="input">Instance of Faction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Faction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    this.Symbol.Equals(input.Symbol)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Headquarters == input.Headquarters ||
                    (this.Headquarters != null &&
                    this.Headquarters.Equals(input.Headquarters))
                ) && 
                (
                    this.Traits == input.Traits ||
                    this.Traits != null &&
                    input.Traits != null &&
                    this.Traits.SequenceEqual(input.Traits)
                ) && 
                (
                    this.IsRecruiting == input.IsRecruiting ||
                    this.IsRecruiting.Equals(input.IsRecruiting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Headquarters != null)
                {
                    hashCode = (hashCode * 59) + this.Headquarters.GetHashCode();
                }
                if (this.Traits != null)
                {
                    hashCode = (hashCode * 59) + this.Traits.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsRecruiting.GetHashCode();
                return hashCode;
            }
        }

    }

}
