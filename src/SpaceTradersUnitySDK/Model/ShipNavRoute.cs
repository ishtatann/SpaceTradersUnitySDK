/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// The routing information for the ship&#39;s most recent transit or current location.
    /// </summary>
    [DataContract(Name = "ShipNavRoute")]
    public partial class ShipNavRoute : IEquatable<ShipNavRoute>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipNavRoute" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipNavRoute() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipNavRoute" /> class.
        /// </summary>
        /// <param name="destination">destination (required).</param>
        /// <param name="origin">origin (required).</param>
        /// <param name="departureTime">The date time of the ship&#39;s departure. (required).</param>
        /// <param name="arrival">The date time of the ship&#39;s arrival. If the ship is in-transit, this is the expected time of arrival. (required).</param>
        public ShipNavRoute(ShipNavRouteWaypoint destination = default(ShipNavRouteWaypoint), ShipNavRouteWaypoint origin = default(ShipNavRouteWaypoint), DateTime departureTime = default(DateTime), DateTime arrival = default(DateTime))
        {
            // to ensure "destination" is required (not null)
            if (destination == null)
            {
                throw new ArgumentNullException("destination is a required property for ShipNavRoute and cannot be null");
            }
            this.Destination = destination;
            // to ensure "origin" is required (not null)
            if (origin == null)
            {
                throw new ArgumentNullException("origin is a required property for ShipNavRoute and cannot be null");
            }
            this.Origin = origin;
            this.DepartureTime = departureTime;
            this.Arrival = arrival;
        }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
        public ShipNavRouteWaypoint Destination { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name = "origin", IsRequired = true, EmitDefaultValue = true)]
        public ShipNavRouteWaypoint Origin { get; set; }

        /// <summary>
        /// The date time of the ship&#39;s departure.
        /// </summary>
        /// <value>The date time of the ship&#39;s departure.</value>
        [DataMember(Name = "departureTime", IsRequired = true, EmitDefaultValue = true)]
        public DateTime DepartureTime { get; set; }

        /// <summary>
        /// The date time of the ship&#39;s arrival. If the ship is in-transit, this is the expected time of arrival.
        /// </summary>
        /// <value>The date time of the ship&#39;s arrival. If the ship is in-transit, this is the expected time of arrival.</value>
        [DataMember(Name = "arrival", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Arrival { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipNavRoute {\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  DepartureTime: ").Append(DepartureTime).Append("\n");
            sb.Append("  Arrival: ").Append(Arrival).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipNavRoute);
        }

        /// <summary>
        /// Returns true if ShipNavRoute instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipNavRoute to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipNavRoute input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Destination == input.Destination ||
                    (this.Destination != null &&
                    this.Destination.Equals(input.Destination))
                ) && 
                (
                    this.Origin == input.Origin ||
                    (this.Origin != null &&
                    this.Origin.Equals(input.Origin))
                ) && 
                (
                    this.DepartureTime == input.DepartureTime ||
                    (this.DepartureTime != null &&
                    this.DepartureTime.Equals(input.DepartureTime))
                ) && 
                (
                    this.Arrival == input.Arrival ||
                    (this.Arrival != null &&
                    this.Arrival.Equals(input.Arrival))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Destination != null)
                {
                    hashCode = (hashCode * 59) + this.Destination.GetHashCode();
                }
                if (this.Origin != null)
                {
                    hashCode = (hashCode * 59) + this.Origin.GetHashCode();
                }
                if (this.DepartureTime != null)
                {
                    hashCode = (hashCode * 59) + this.DepartureTime.GetHashCode();
                }
                if (this.Arrival != null)
                {
                    hashCode = (hashCode * 59) + this.Arrival.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
