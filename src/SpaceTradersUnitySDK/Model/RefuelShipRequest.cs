/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// RefuelShipRequest
    /// </summary>
    [DataContract(Name = "refuel_ship_request")]
    public partial class RefuelShipRequest : IEquatable<RefuelShipRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RefuelShipRequest" /> class.
        /// </summary>
        /// <param name="units">The amount of fuel to fill in the ship&#39;s tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship&#39;s remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units..</param>
        /// <param name="fromCargo">Wether to use the FUEL thats in your cargo or not. Default: false.</param>
        public RefuelShipRequest(int units = default(int), bool fromCargo = default(bool))
        {
            this.Units = units;
            this.FromCargo = fromCargo;
        }

        /// <summary>
        /// The amount of fuel to fill in the ship&#39;s tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship&#39;s remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units.
        /// </summary>
        /// <value>The amount of fuel to fill in the ship&#39;s tanks. When not specified, the ship will be refueled to its maximum fuel capacity. If the amount specified is greater than the ship&#39;s remaining capacity, the ship will only be refueled to its maximum fuel capacity. The amount specified is not in market units but in ship fuel units.</value>
        /// <example>100</example>
        [DataMember(Name = "units", EmitDefaultValue = false)]
        public int Units { get; set; }

        /// <summary>
        /// Wether to use the FUEL thats in your cargo or not. Default: false
        /// </summary>
        /// <value>Wether to use the FUEL thats in your cargo or not. Default: false</value>
        /// <example>false</example>
        [DataMember(Name = "fromCargo", EmitDefaultValue = true)]
        public bool FromCargo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RefuelShipRequest {\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("  FromCargo: ").Append(FromCargo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RefuelShipRequest);
        }

        /// <summary>
        /// Returns true if RefuelShipRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of RefuelShipRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RefuelShipRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Units == input.Units ||
                    this.Units.Equals(input.Units)
                ) && 
                (
                    this.FromCargo == input.FromCargo ||
                    this.FromCargo.Equals(input.FromCargo)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Units.GetHashCode();
                hashCode = (hashCode * 59) + this.FromCargo.GetHashCode();
                return hashCode;
            }
        }

    }

}
