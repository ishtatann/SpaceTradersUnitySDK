/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// WaypointTrait
    /// </summary>
    [DataContract(Name = "WaypointTrait")]
    public partial class WaypointTrait : IEquatable<WaypointTrait>
    {
        /// <summary>
        /// The unique identifier of the trait.
        /// </summary>
        /// <value>The unique identifier of the trait.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SymbolEnum
        {
            /// <summary>
            /// Enum UNCHARTED for value: UNCHARTED
            /// </summary>
            [EnumMember(Value = "UNCHARTED")]
            UNCHARTED = 1,

            /// <summary>
            /// Enum MARKETPLACE for value: MARKETPLACE
            /// </summary>
            [EnumMember(Value = "MARKETPLACE")]
            MARKETPLACE = 2,

            /// <summary>
            /// Enum SHIPYARD for value: SHIPYARD
            /// </summary>
            [EnumMember(Value = "SHIPYARD")]
            SHIPYARD = 3,

            /// <summary>
            /// Enum OUTPOST for value: OUTPOST
            /// </summary>
            [EnumMember(Value = "OUTPOST")]
            OUTPOST = 4,

            /// <summary>
            /// Enum SCATTEREDSETTLEMENTS for value: SCATTERED_SETTLEMENTS
            /// </summary>
            [EnumMember(Value = "SCATTERED_SETTLEMENTS")]
            SCATTEREDSETTLEMENTS = 5,

            /// <summary>
            /// Enum SPRAWLINGCITIES for value: SPRAWLING_CITIES
            /// </summary>
            [EnumMember(Value = "SPRAWLING_CITIES")]
            SPRAWLINGCITIES = 6,

            /// <summary>
            /// Enum MEGASTRUCTURES for value: MEGA_STRUCTURES
            /// </summary>
            [EnumMember(Value = "MEGA_STRUCTURES")]
            MEGASTRUCTURES = 7,

            /// <summary>
            /// Enum OVERCROWDED for value: OVERCROWDED
            /// </summary>
            [EnumMember(Value = "OVERCROWDED")]
            OVERCROWDED = 8,

            /// <summary>
            /// Enum HIGHTECH for value: HIGH_TECH
            /// </summary>
            [EnumMember(Value = "HIGH_TECH")]
            HIGHTECH = 9,

            /// <summary>
            /// Enum CORRUPT for value: CORRUPT
            /// </summary>
            [EnumMember(Value = "CORRUPT")]
            CORRUPT = 10,

            /// <summary>
            /// Enum BUREAUCRATIC for value: BUREAUCRATIC
            /// </summary>
            [EnumMember(Value = "BUREAUCRATIC")]
            BUREAUCRATIC = 11,

            /// <summary>
            /// Enum TRADINGHUB for value: TRADING_HUB
            /// </summary>
            [EnumMember(Value = "TRADING_HUB")]
            TRADINGHUB = 12,

            /// <summary>
            /// Enum INDUSTRIAL for value: INDUSTRIAL
            /// </summary>
            [EnumMember(Value = "INDUSTRIAL")]
            INDUSTRIAL = 13,

            /// <summary>
            /// Enum BLACKMARKET for value: BLACK_MARKET
            /// </summary>
            [EnumMember(Value = "BLACK_MARKET")]
            BLACKMARKET = 14,

            /// <summary>
            /// Enum RESEARCHFACILITY for value: RESEARCH_FACILITY
            /// </summary>
            [EnumMember(Value = "RESEARCH_FACILITY")]
            RESEARCHFACILITY = 15,

            /// <summary>
            /// Enum MILITARYBASE for value: MILITARY_BASE
            /// </summary>
            [EnumMember(Value = "MILITARY_BASE")]
            MILITARYBASE = 16,

            /// <summary>
            /// Enum SURVEILLANCEOUTPOST for value: SURVEILLANCE_OUTPOST
            /// </summary>
            [EnumMember(Value = "SURVEILLANCE_OUTPOST")]
            SURVEILLANCEOUTPOST = 17,

            /// <summary>
            /// Enum EXPLORATIONOUTPOST for value: EXPLORATION_OUTPOST
            /// </summary>
            [EnumMember(Value = "EXPLORATION_OUTPOST")]
            EXPLORATIONOUTPOST = 18,

            /// <summary>
            /// Enum MINERALDEPOSITS for value: MINERAL_DEPOSITS
            /// </summary>
            [EnumMember(Value = "MINERAL_DEPOSITS")]
            MINERALDEPOSITS = 19,

            /// <summary>
            /// Enum COMMONMETALDEPOSITS for value: COMMON_METAL_DEPOSITS
            /// </summary>
            [EnumMember(Value = "COMMON_METAL_DEPOSITS")]
            COMMONMETALDEPOSITS = 20,

            /// <summary>
            /// Enum PRECIOUSMETALDEPOSITS for value: PRECIOUS_METAL_DEPOSITS
            /// </summary>
            [EnumMember(Value = "PRECIOUS_METAL_DEPOSITS")]
            PRECIOUSMETALDEPOSITS = 21,

            /// <summary>
            /// Enum RAREMETALDEPOSITS for value: RARE_METAL_DEPOSITS
            /// </summary>
            [EnumMember(Value = "RARE_METAL_DEPOSITS")]
            RAREMETALDEPOSITS = 22,

            /// <summary>
            /// Enum METHANEPOOLS for value: METHANE_POOLS
            /// </summary>
            [EnumMember(Value = "METHANE_POOLS")]
            METHANEPOOLS = 23,

            /// <summary>
            /// Enum ICECRYSTALS for value: ICE_CRYSTALS
            /// </summary>
            [EnumMember(Value = "ICE_CRYSTALS")]
            ICECRYSTALS = 24,

            /// <summary>
            /// Enum EXPLOSIVEGASES for value: EXPLOSIVE_GASES
            /// </summary>
            [EnumMember(Value = "EXPLOSIVE_GASES")]
            EXPLOSIVEGASES = 25,

            /// <summary>
            /// Enum STRONGMAGNETOSPHERE for value: STRONG_MAGNETOSPHERE
            /// </summary>
            [EnumMember(Value = "STRONG_MAGNETOSPHERE")]
            STRONGMAGNETOSPHERE = 26,

            /// <summary>
            /// Enum VIBRANTAURORAS for value: VIBRANT_AURORAS
            /// </summary>
            [EnumMember(Value = "VIBRANT_AURORAS")]
            VIBRANTAURORAS = 27,

            /// <summary>
            /// Enum SALTFLATS for value: SALT_FLATS
            /// </summary>
            [EnumMember(Value = "SALT_FLATS")]
            SALTFLATS = 28,

            /// <summary>
            /// Enum CANYONS for value: CANYONS
            /// </summary>
            [EnumMember(Value = "CANYONS")]
            CANYONS = 29,

            /// <summary>
            /// Enum PERPETUALDAYLIGHT for value: PERPETUAL_DAYLIGHT
            /// </summary>
            [EnumMember(Value = "PERPETUAL_DAYLIGHT")]
            PERPETUALDAYLIGHT = 30,

            /// <summary>
            /// Enum PERPETUALOVERCAST for value: PERPETUAL_OVERCAST
            /// </summary>
            [EnumMember(Value = "PERPETUAL_OVERCAST")]
            PERPETUALOVERCAST = 31,

            /// <summary>
            /// Enum DRYSEABEDS for value: DRY_SEABEDS
            /// </summary>
            [EnumMember(Value = "DRY_SEABEDS")]
            DRYSEABEDS = 32,

            /// <summary>
            /// Enum MAGMASEAS for value: MAGMA_SEAS
            /// </summary>
            [EnumMember(Value = "MAGMA_SEAS")]
            MAGMASEAS = 33,

            /// <summary>
            /// Enum SUPERVOLCANOES for value: SUPERVOLCANOES
            /// </summary>
            [EnumMember(Value = "SUPERVOLCANOES")]
            SUPERVOLCANOES = 34,

            /// <summary>
            /// Enum ASHCLOUDS for value: ASH_CLOUDS
            /// </summary>
            [EnumMember(Value = "ASH_CLOUDS")]
            ASHCLOUDS = 35,

            /// <summary>
            /// Enum VASTRUINS for value: VAST_RUINS
            /// </summary>
            [EnumMember(Value = "VAST_RUINS")]
            VASTRUINS = 36,

            /// <summary>
            /// Enum MUTATEDFLORA for value: MUTATED_FLORA
            /// </summary>
            [EnumMember(Value = "MUTATED_FLORA")]
            MUTATEDFLORA = 37,

            /// <summary>
            /// Enum TERRAFORMED for value: TERRAFORMED
            /// </summary>
            [EnumMember(Value = "TERRAFORMED")]
            TERRAFORMED = 38,

            /// <summary>
            /// Enum EXTREMETEMPERATURES for value: EXTREME_TEMPERATURES
            /// </summary>
            [EnumMember(Value = "EXTREME_TEMPERATURES")]
            EXTREMETEMPERATURES = 39,

            /// <summary>
            /// Enum EXTREMEPRESSURE for value: EXTREME_PRESSURE
            /// </summary>
            [EnumMember(Value = "EXTREME_PRESSURE")]
            EXTREMEPRESSURE = 40,

            /// <summary>
            /// Enum DIVERSELIFE for value: DIVERSE_LIFE
            /// </summary>
            [EnumMember(Value = "DIVERSE_LIFE")]
            DIVERSELIFE = 41,

            /// <summary>
            /// Enum SCARCELIFE for value: SCARCE_LIFE
            /// </summary>
            [EnumMember(Value = "SCARCE_LIFE")]
            SCARCELIFE = 42,

            /// <summary>
            /// Enum FOSSILS for value: FOSSILS
            /// </summary>
            [EnumMember(Value = "FOSSILS")]
            FOSSILS = 43,

            /// <summary>
            /// Enum WEAKGRAVITY for value: WEAK_GRAVITY
            /// </summary>
            [EnumMember(Value = "WEAK_GRAVITY")]
            WEAKGRAVITY = 44,

            /// <summary>
            /// Enum STRONGGRAVITY for value: STRONG_GRAVITY
            /// </summary>
            [EnumMember(Value = "STRONG_GRAVITY")]
            STRONGGRAVITY = 45,

            /// <summary>
            /// Enum CRUSHINGGRAVITY for value: CRUSHING_GRAVITY
            /// </summary>
            [EnumMember(Value = "CRUSHING_GRAVITY")]
            CRUSHINGGRAVITY = 46,

            /// <summary>
            /// Enum TOXICATMOSPHERE for value: TOXIC_ATMOSPHERE
            /// </summary>
            [EnumMember(Value = "TOXIC_ATMOSPHERE")]
            TOXICATMOSPHERE = 47,

            /// <summary>
            /// Enum CORROSIVEATMOSPHERE for value: CORROSIVE_ATMOSPHERE
            /// </summary>
            [EnumMember(Value = "CORROSIVE_ATMOSPHERE")]
            CORROSIVEATMOSPHERE = 48,

            /// <summary>
            /// Enum BREATHABLEATMOSPHERE for value: BREATHABLE_ATMOSPHERE
            /// </summary>
            [EnumMember(Value = "BREATHABLE_ATMOSPHERE")]
            BREATHABLEATMOSPHERE = 49,

            /// <summary>
            /// Enum JOVIAN for value: JOVIAN
            /// </summary>
            [EnumMember(Value = "JOVIAN")]
            JOVIAN = 50,

            /// <summary>
            /// Enum ROCKY for value: ROCKY
            /// </summary>
            [EnumMember(Value = "ROCKY")]
            ROCKY = 51,

            /// <summary>
            /// Enum VOLCANIC for value: VOLCANIC
            /// </summary>
            [EnumMember(Value = "VOLCANIC")]
            VOLCANIC = 52,

            /// <summary>
            /// Enum FROZEN for value: FROZEN
            /// </summary>
            [EnumMember(Value = "FROZEN")]
            FROZEN = 53,

            /// <summary>
            /// Enum SWAMP for value: SWAMP
            /// </summary>
            [EnumMember(Value = "SWAMP")]
            SWAMP = 54,

            /// <summary>
            /// Enum BARREN for value: BARREN
            /// </summary>
            [EnumMember(Value = "BARREN")]
            BARREN = 55,

            /// <summary>
            /// Enum TEMPERATE for value: TEMPERATE
            /// </summary>
            [EnumMember(Value = "TEMPERATE")]
            TEMPERATE = 56,

            /// <summary>
            /// Enum JUNGLE for value: JUNGLE
            /// </summary>
            [EnumMember(Value = "JUNGLE")]
            JUNGLE = 57,

            /// <summary>
            /// Enum OCEAN for value: OCEAN
            /// </summary>
            [EnumMember(Value = "OCEAN")]
            OCEAN = 58,

            /// <summary>
            /// Enum STRIPPED for value: STRIPPED
            /// </summary>
            [EnumMember(Value = "STRIPPED")]
            STRIPPED = 59

        }


        /// <summary>
        /// The unique identifier of the trait.
        /// </summary>
        /// <value>The unique identifier of the trait.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public SymbolEnum Symbol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="WaypointTrait" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected WaypointTrait() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="WaypointTrait" /> class.
        /// </summary>
        /// <param name="symbol">The unique identifier of the trait. (required).</param>
        /// <param name="name">The name of the trait. (required).</param>
        /// <param name="description">A description of the trait. (required).</param>
        public WaypointTrait(SymbolEnum symbol = default(SymbolEnum), string name = default(string), string description = default(string))
        {
            this.Symbol = symbol;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for WaypointTrait and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for WaypointTrait and cannot be null");
            }
            this.Description = description;
        }

        /// <summary>
        /// The name of the trait.
        /// </summary>
        /// <value>The name of the trait.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the trait.
        /// </summary>
        /// <value>A description of the trait.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WaypointTrait {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as WaypointTrait);
        }

        /// <summary>
        /// Returns true if WaypointTrait instances are equal
        /// </summary>
        /// <param name="input">Instance of WaypointTrait to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WaypointTrait input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    this.Symbol.Equals(input.Symbol)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
