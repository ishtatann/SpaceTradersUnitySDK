/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// An event that represents damage or wear to a ship&#39;s reactor, frame, or engine, reducing the condition of the ship.
    /// </summary>
    [DataContract(Name = "ShipConditionEvent")]
    public partial class ShipConditionEvent : IEquatable<ShipConditionEvent>
    {
        /// <summary>
        /// Defines Symbol
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SymbolEnum
        {
            /// <summary>
            /// Enum REACTOROVERLOAD for value: REACTOR_OVERLOAD
            /// </summary>
            [EnumMember(Value = "REACTOR_OVERLOAD")]
            REACTOROVERLOAD = 1,

            /// <summary>
            /// Enum ENERGYSPIKEFROMMINERAL for value: ENERGY_SPIKE_FROM_MINERAL
            /// </summary>
            [EnumMember(Value = "ENERGY_SPIKE_FROM_MINERAL")]
            ENERGYSPIKEFROMMINERAL = 2,

            /// <summary>
            /// Enum SOLARFLAREINTERFERENCE for value: SOLAR_FLARE_INTERFERENCE
            /// </summary>
            [EnumMember(Value = "SOLAR_FLARE_INTERFERENCE")]
            SOLARFLAREINTERFERENCE = 3,

            /// <summary>
            /// Enum COOLANTLEAK for value: COOLANT_LEAK
            /// </summary>
            [EnumMember(Value = "COOLANT_LEAK")]
            COOLANTLEAK = 4,

            /// <summary>
            /// Enum POWERDISTRIBUTIONFLUCTUATION for value: POWER_DISTRIBUTION_FLUCTUATION
            /// </summary>
            [EnumMember(Value = "POWER_DISTRIBUTION_FLUCTUATION")]
            POWERDISTRIBUTIONFLUCTUATION = 5,

            /// <summary>
            /// Enum MAGNETICFIELDDISRUPTION for value: MAGNETIC_FIELD_DISRUPTION
            /// </summary>
            [EnumMember(Value = "MAGNETIC_FIELD_DISRUPTION")]
            MAGNETICFIELDDISRUPTION = 6,

            /// <summary>
            /// Enum HULLMICROMETEORITESTRIKES for value: HULL_MICROMETEORITE_STRIKES
            /// </summary>
            [EnumMember(Value = "HULL_MICROMETEORITE_STRIKES")]
            HULLMICROMETEORITESTRIKES = 7,

            /// <summary>
            /// Enum STRUCTURALSTRESSFRACTURES for value: STRUCTURAL_STRESS_FRACTURES
            /// </summary>
            [EnumMember(Value = "STRUCTURAL_STRESS_FRACTURES")]
            STRUCTURALSTRESSFRACTURES = 8,

            /// <summary>
            /// Enum CORROSIVEMINERALCONTAMINATION for value: CORROSIVE_MINERAL_CONTAMINATION
            /// </summary>
            [EnumMember(Value = "CORROSIVE_MINERAL_CONTAMINATION")]
            CORROSIVEMINERALCONTAMINATION = 9,

            /// <summary>
            /// Enum THERMALEXPANSIONMISMATCH for value: THERMAL_EXPANSION_MISMATCH
            /// </summary>
            [EnumMember(Value = "THERMAL_EXPANSION_MISMATCH")]
            THERMALEXPANSIONMISMATCH = 10,

            /// <summary>
            /// Enum VIBRATIONDAMAGEFROMDRILLING for value: VIBRATION_DAMAGE_FROM_DRILLING
            /// </summary>
            [EnumMember(Value = "VIBRATION_DAMAGE_FROM_DRILLING")]
            VIBRATIONDAMAGEFROMDRILLING = 11,

            /// <summary>
            /// Enum ELECTROMAGNETICFIELDINTERFERENCE for value: ELECTROMAGNETIC_FIELD_INTERFERENCE
            /// </summary>
            [EnumMember(Value = "ELECTROMAGNETIC_FIELD_INTERFERENCE")]
            ELECTROMAGNETICFIELDINTERFERENCE = 12,

            /// <summary>
            /// Enum IMPACTWITHEXTRACTEDDEBRIS for value: IMPACT_WITH_EXTRACTED_DEBRIS
            /// </summary>
            [EnumMember(Value = "IMPACT_WITH_EXTRACTED_DEBRIS")]
            IMPACTWITHEXTRACTEDDEBRIS = 13,

            /// <summary>
            /// Enum FUELEFFICIENCYDEGRADATION for value: FUEL_EFFICIENCY_DEGRADATION
            /// </summary>
            [EnumMember(Value = "FUEL_EFFICIENCY_DEGRADATION")]
            FUELEFFICIENCYDEGRADATION = 14,

            /// <summary>
            /// Enum COOLANTSYSTEMAGEING for value: COOLANT_SYSTEM_AGEING
            /// </summary>
            [EnumMember(Value = "COOLANT_SYSTEM_AGEING")]
            COOLANTSYSTEMAGEING = 15,

            /// <summary>
            /// Enum DUSTMICROABRASIONS for value: DUST_MICROABRASIONS
            /// </summary>
            [EnumMember(Value = "DUST_MICROABRASIONS")]
            DUSTMICROABRASIONS = 16,

            /// <summary>
            /// Enum THRUSTERNOZZLEWEAR for value: THRUSTER_NOZZLE_WEAR
            /// </summary>
            [EnumMember(Value = "THRUSTER_NOZZLE_WEAR")]
            THRUSTERNOZZLEWEAR = 17,

            /// <summary>
            /// Enum EXHAUSTPORTCLOGGING for value: EXHAUST_PORT_CLOGGING
            /// </summary>
            [EnumMember(Value = "EXHAUST_PORT_CLOGGING")]
            EXHAUSTPORTCLOGGING = 18,

            /// <summary>
            /// Enum BEARINGLUBRICATIONFADE for value: BEARING_LUBRICATION_FADE
            /// </summary>
            [EnumMember(Value = "BEARING_LUBRICATION_FADE")]
            BEARINGLUBRICATIONFADE = 19,

            /// <summary>
            /// Enum SENSORCALIBRATIONDRIFT for value: SENSOR_CALIBRATION_DRIFT
            /// </summary>
            [EnumMember(Value = "SENSOR_CALIBRATION_DRIFT")]
            SENSORCALIBRATIONDRIFT = 20,

            /// <summary>
            /// Enum HULLMICROMETEORITEDAMAGE for value: HULL_MICROMETEORITE_DAMAGE
            /// </summary>
            [EnumMember(Value = "HULL_MICROMETEORITE_DAMAGE")]
            HULLMICROMETEORITEDAMAGE = 21,

            /// <summary>
            /// Enum SPACEDEBRISCOLLISION for value: SPACE_DEBRIS_COLLISION
            /// </summary>
            [EnumMember(Value = "SPACE_DEBRIS_COLLISION")]
            SPACEDEBRISCOLLISION = 22,

            /// <summary>
            /// Enum THERMALSTRESS for value: THERMAL_STRESS
            /// </summary>
            [EnumMember(Value = "THERMAL_STRESS")]
            THERMALSTRESS = 23,

            /// <summary>
            /// Enum VIBRATIONOVERLOAD for value: VIBRATION_OVERLOAD
            /// </summary>
            [EnumMember(Value = "VIBRATION_OVERLOAD")]
            VIBRATIONOVERLOAD = 24,

            /// <summary>
            /// Enum PRESSUREDIFFERENTIALSTRESS for value: PRESSURE_DIFFERENTIAL_STRESS
            /// </summary>
            [EnumMember(Value = "PRESSURE_DIFFERENTIAL_STRESS")]
            PRESSUREDIFFERENTIALSTRESS = 25,

            /// <summary>
            /// Enum ELECTROMAGNETICSURGEEFFECTS for value: ELECTROMAGNETIC_SURGE_EFFECTS
            /// </summary>
            [EnumMember(Value = "ELECTROMAGNETIC_SURGE_EFFECTS")]
            ELECTROMAGNETICSURGEEFFECTS = 26,

            /// <summary>
            /// Enum ATMOSPHERICENTRYHEAT for value: ATMOSPHERIC_ENTRY_HEAT
            /// </summary>
            [EnumMember(Value = "ATMOSPHERIC_ENTRY_HEAT")]
            ATMOSPHERICENTRYHEAT = 27

        }


        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public SymbolEnum Symbol { get; set; }
        /// <summary>
        /// Defines Component
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ComponentEnum
        {
            /// <summary>
            /// Enum FRAME for value: FRAME
            /// </summary>
            [EnumMember(Value = "FRAME")]
            FRAME = 1,

            /// <summary>
            /// Enum REACTOR for value: REACTOR
            /// </summary>
            [EnumMember(Value = "REACTOR")]
            REACTOR = 2,

            /// <summary>
            /// Enum ENGINE for value: ENGINE
            /// </summary>
            [EnumMember(Value = "ENGINE")]
            ENGINE = 3

        }


        /// <summary>
        /// Gets or Sets Component
        /// </summary>
        [DataMember(Name = "component", IsRequired = true, EmitDefaultValue = true)]
        public ComponentEnum Component { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipConditionEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipConditionEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipConditionEvent" /> class.
        /// </summary>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="component">component (required).</param>
        /// <param name="name">The name of the event. (required).</param>
        /// <param name="description">A description of the event. (required).</param>
        public ShipConditionEvent(SymbolEnum symbol = default(SymbolEnum), ComponentEnum component = default(ComponentEnum), string name = default(string), string description = default(string))
        {
            this.Symbol = symbol;
            this.Component = component;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ShipConditionEvent and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ShipConditionEvent and cannot be null");
            }
            this.Description = description;
        }

        /// <summary>
        /// The name of the event.
        /// </summary>
        /// <value>The name of the event.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// A description of the event.
        /// </summary>
        /// <value>A description of the event.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipConditionEvent {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Component: ").Append(Component).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipConditionEvent);
        }

        /// <summary>
        /// Returns true if ShipConditionEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipConditionEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipConditionEvent input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    this.Symbol.Equals(input.Symbol)
                ) && 
                (
                    this.Component == input.Component ||
                    this.Component.Equals(input.Component)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                hashCode = (hashCode * 59) + this.Component.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
