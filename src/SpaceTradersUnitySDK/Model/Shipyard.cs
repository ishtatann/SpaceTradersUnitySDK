/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// Shipyard
    /// </summary>
    [DataContract(Name = "Shipyard")]
    public partial class Shipyard : IEquatable<Shipyard>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipyard" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Shipyard() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Shipyard" /> class.
        /// </summary>
        /// <param name="symbol">The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located. (required).</param>
        /// <param name="shipTypes">The list of ship types available for purchase at this shipyard. (required).</param>
        /// <param name="transactions">The list of recent transactions at this shipyard..</param>
        /// <param name="ships">The ships that are currently available for purchase at the shipyard..</param>
        /// <param name="modificationsFee">The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies. (required).</param>
        public Shipyard(string symbol = default(string), List<ShipyardShipTypesInner> shipTypes = default(List<ShipyardShipTypesInner>), List<ShipyardTransaction> transactions = default(List<ShipyardTransaction>), List<ShipyardShip> ships = default(List<ShipyardShip>), int modificationsFee = default(int))
        {
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for Shipyard and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "shipTypes" is required (not null)
            if (shipTypes == null)
            {
                throw new ArgumentNullException("shipTypes is a required property for Shipyard and cannot be null");
            }
            this.ShipTypes = shipTypes;
            this.ModificationsFee = modificationsFee;
            this.Transactions = transactions;
            this.Ships = ships;
        }

        /// <summary>
        /// The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
        /// </summary>
        /// <value>The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The list of ship types available for purchase at this shipyard.
        /// </summary>
        /// <value>The list of ship types available for purchase at this shipyard.</value>
        [DataMember(Name = "shipTypes", IsRequired = true, EmitDefaultValue = true)]
        public List<ShipyardShipTypesInner> ShipTypes { get; set; }

        /// <summary>
        /// The list of recent transactions at this shipyard.
        /// </summary>
        /// <value>The list of recent transactions at this shipyard.</value>
        [DataMember(Name = "transactions", EmitDefaultValue = false)]
        public List<ShipyardTransaction> Transactions { get; set; }

        /// <summary>
        /// The ships that are currently available for purchase at the shipyard.
        /// </summary>
        /// <value>The ships that are currently available for purchase at the shipyard.</value>
        [DataMember(Name = "ships", EmitDefaultValue = false)]
        public List<ShipyardShip> Ships { get; set; }

        /// <summary>
        /// The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.
        /// </summary>
        /// <value>The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.</value>
        [DataMember(Name = "modificationsFee", IsRequired = true, EmitDefaultValue = true)]
        public int ModificationsFee { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Shipyard {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  ShipTypes: ").Append(ShipTypes).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("  Ships: ").Append(Ships).Append("\n");
            sb.Append("  ModificationsFee: ").Append(ModificationsFee).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Shipyard);
        }

        /// <summary>
        /// Returns true if Shipyard instances are equal
        /// </summary>
        /// <param name="input">Instance of Shipyard to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Shipyard input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.ShipTypes == input.ShipTypes ||
                    this.ShipTypes != null &&
                    input.ShipTypes != null &&
                    this.ShipTypes.SequenceEqual(input.ShipTypes)
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    this.Transactions != null &&
                    input.Transactions != null &&
                    this.Transactions.SequenceEqual(input.Transactions)
                ) && 
                (
                    this.Ships == input.Ships ||
                    this.Ships != null &&
                    input.Ships != null &&
                    this.Ships.SequenceEqual(input.Ships)
                ) && 
                (
                    this.ModificationsFee == input.ModificationsFee ||
                    this.ModificationsFee.Equals(input.ModificationsFee)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.ShipTypes != null)
                {
                    hashCode = (hashCode * 59) + this.ShipTypes.GetHashCode();
                }
                if (this.Transactions != null)
                {
                    hashCode = (hashCode * 59) + this.Transactions.GetHashCode();
                }
                if (this.Ships != null)
                {
                    hashCode = (hashCode * 59) + this.Ships.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModificationsFee.GetHashCode();
                return hashCode;
            }
        }

    }

}
