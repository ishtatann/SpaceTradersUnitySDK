/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// The navigation information of the ship.
    /// </summary>
    [DataContract(Name = "ShipNav")]
    public partial class ShipNav : IEquatable<ShipNav>
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public ShipNavStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets FlightMode
        /// </summary>
        [DataMember(Name = "flightMode", IsRequired = true, EmitDefaultValue = true)]
        public ShipNavFlightMode FlightMode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipNav" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipNav() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipNav" /> class.
        /// </summary>
        /// <param name="systemSymbol">The system symbol of the ship&#39;s current location. (required).</param>
        /// <param name="waypointSymbol">The waypoint symbol of the ship&#39;s current location, or if the ship is in-transit, the waypoint symbol of the ship&#39;s destination. (required).</param>
        /// <param name="route">route (required).</param>
        /// <param name="status">status (required).</param>
        /// <param name="flightMode">flightMode (required).</param>
        public ShipNav(string systemSymbol = default(string), string waypointSymbol = default(string), ShipNavRoute route = default(ShipNavRoute), ShipNavStatus status = default(ShipNavStatus), ShipNavFlightMode flightMode = default(ShipNavFlightMode))
        {
            // to ensure "systemSymbol" is required (not null)
            if (systemSymbol == null)
            {
                throw new ArgumentNullException("systemSymbol is a required property for ShipNav and cannot be null");
            }
            this.SystemSymbol = systemSymbol;
            // to ensure "waypointSymbol" is required (not null)
            if (waypointSymbol == null)
            {
                throw new ArgumentNullException("waypointSymbol is a required property for ShipNav and cannot be null");
            }
            this.WaypointSymbol = waypointSymbol;
            // to ensure "route" is required (not null)
            if (route == null)
            {
                throw new ArgumentNullException("route is a required property for ShipNav and cannot be null");
            }
            this.Route = route;
            this.Status = status;
            this.FlightMode = flightMode;
        }

        /// <summary>
        /// The system symbol of the ship&#39;s current location.
        /// </summary>
        /// <value>The system symbol of the ship&#39;s current location.</value>
        [DataMember(Name = "systemSymbol", IsRequired = true, EmitDefaultValue = true)]
        public string SystemSymbol { get; set; }

        /// <summary>
        /// The waypoint symbol of the ship&#39;s current location, or if the ship is in-transit, the waypoint symbol of the ship&#39;s destination.
        /// </summary>
        /// <value>The waypoint symbol of the ship&#39;s current location, or if the ship is in-transit, the waypoint symbol of the ship&#39;s destination.</value>
        [DataMember(Name = "waypointSymbol", IsRequired = true, EmitDefaultValue = true)]
        public string WaypointSymbol { get; set; }

        /// <summary>
        /// Gets or Sets Route
        /// </summary>
        [DataMember(Name = "route", IsRequired = true, EmitDefaultValue = true)]
        public ShipNavRoute Route { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipNav {\n");
            sb.Append("  SystemSymbol: ").Append(SystemSymbol).Append("\n");
            sb.Append("  WaypointSymbol: ").Append(WaypointSymbol).Append("\n");
            sb.Append("  Route: ").Append(Route).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  FlightMode: ").Append(FlightMode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipNav);
        }

        /// <summary>
        /// Returns true if ShipNav instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipNav to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipNav input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SystemSymbol == input.SystemSymbol ||
                    (this.SystemSymbol != null &&
                    this.SystemSymbol.Equals(input.SystemSymbol))
                ) && 
                (
                    this.WaypointSymbol == input.WaypointSymbol ||
                    (this.WaypointSymbol != null &&
                    this.WaypointSymbol.Equals(input.WaypointSymbol))
                ) && 
                (
                    this.Route == input.Route ||
                    (this.Route != null &&
                    this.Route.Equals(input.Route))
                ) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && 
                (
                    this.FlightMode == input.FlightMode ||
                    this.FlightMode.Equals(input.FlightMode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SystemSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.SystemSymbol.GetHashCode();
                }
                if (this.WaypointSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.WaypointSymbol.GetHashCode();
                }
                if (this.Route != null)
                {
                    hashCode = (hashCode * 59) + this.Route.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                hashCode = (hashCode * 59) + this.FlightMode.GetHashCode();
                return hashCode;
            }
        }

    }

}
