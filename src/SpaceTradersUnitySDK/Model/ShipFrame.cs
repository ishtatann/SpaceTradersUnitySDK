/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = SpaceTradersUnitySDK.Client.OpenAPIDateConverter;

namespace SpaceTradersUnitySDK.Model
{
    /// <summary>
    /// The frame of the ship. The frame determines the number of modules and mounting points of the ship, as well as base fuel capacity. As the condition of the frame takes more wear, the ship will become more sluggish and less maneuverable.
    /// </summary>
    [DataContract(Name = "ShipFrame")]
    public partial class ShipFrame : IEquatable<ShipFrame>
    {
        /// <summary>
        /// Defines Symbol
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum SymbolEnum
        {
            /// <summary>
            /// Enum PROBE for value: FRAME_PROBE
            /// </summary>
            [EnumMember(Value = "FRAME_PROBE")]
            PROBE = 1,

            /// <summary>
            /// Enum DRONE for value: FRAME_DRONE
            /// </summary>
            [EnumMember(Value = "FRAME_DRONE")]
            DRONE = 2,

            /// <summary>
            /// Enum INTERCEPTOR for value: FRAME_INTERCEPTOR
            /// </summary>
            [EnumMember(Value = "FRAME_INTERCEPTOR")]
            INTERCEPTOR = 3,

            /// <summary>
            /// Enum RACER for value: FRAME_RACER
            /// </summary>
            [EnumMember(Value = "FRAME_RACER")]
            RACER = 4,

            /// <summary>
            /// Enum FIGHTER for value: FRAME_FIGHTER
            /// </summary>
            [EnumMember(Value = "FRAME_FIGHTER")]
            FIGHTER = 5,

            /// <summary>
            /// Enum FRIGATE for value: FRAME_FRIGATE
            /// </summary>
            [EnumMember(Value = "FRAME_FRIGATE")]
            FRIGATE = 6,

            /// <summary>
            /// Enum SHUTTLE for value: FRAME_SHUTTLE
            /// </summary>
            [EnumMember(Value = "FRAME_SHUTTLE")]
            SHUTTLE = 7,

            /// <summary>
            /// Enum EXPLORER for value: FRAME_EXPLORER
            /// </summary>
            [EnumMember(Value = "FRAME_EXPLORER")]
            EXPLORER = 8,

            /// <summary>
            /// Enum MINER for value: FRAME_MINER
            /// </summary>
            [EnumMember(Value = "FRAME_MINER")]
            MINER = 9,

            /// <summary>
            /// Enum LIGHTFREIGHTER for value: FRAME_LIGHT_FREIGHTER
            /// </summary>
            [EnumMember(Value = "FRAME_LIGHT_FREIGHTER")]
            LIGHTFREIGHTER = 10,

            /// <summary>
            /// Enum HEAVYFREIGHTER for value: FRAME_HEAVY_FREIGHTER
            /// </summary>
            [EnumMember(Value = "FRAME_HEAVY_FREIGHTER")]
            HEAVYFREIGHTER = 11,

            /// <summary>
            /// Enum TRANSPORT for value: FRAME_TRANSPORT
            /// </summary>
            [EnumMember(Value = "FRAME_TRANSPORT")]
            TRANSPORT = 12,

            /// <summary>
            /// Enum DESTROYER for value: FRAME_DESTROYER
            /// </summary>
            [EnumMember(Value = "FRAME_DESTROYER")]
            DESTROYER = 13,

            /// <summary>
            /// Enum CRUISER for value: FRAME_CRUISER
            /// </summary>
            [EnumMember(Value = "FRAME_CRUISER")]
            CRUISER = 14,

            /// <summary>
            /// Enum CARRIER for value: FRAME_CARRIER
            /// </summary>
            [EnumMember(Value = "FRAME_CARRIER")]
            CARRIER = 15

        }


        /// <summary>
        /// Gets or Sets Symbol
        /// </summary>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public SymbolEnum Symbol { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipFrame" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ShipFrame() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ShipFrame" /> class.
        /// </summary>
        /// <param name="symbol">symbol (required).</param>
        /// <param name="name">name (required).</param>
        /// <param name="description">description (required).</param>
        /// <param name="condition">Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new..</param>
        /// <param name="moduleSlots">moduleSlots (required).</param>
        /// <param name="mountingPoints">mountingPoints (required).</param>
        /// <param name="fuelCapacity">fuelCapacity (required).</param>
        /// <param name="requirements">requirements (required).</param>
        public ShipFrame(SymbolEnum symbol = default(SymbolEnum), string name = default(string), string description = default(string), int condition = default(int), int moduleSlots = default(int), int mountingPoints = default(int), int fuelCapacity = default(int), ShipRequirements requirements = default(ShipRequirements))
        {
            this.Symbol = symbol;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for ShipFrame and cannot be null");
            }
            this.Name = name;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ShipFrame and cannot be null");
            }
            this.Description = description;
            this.ModuleSlots = moduleSlots;
            this.MountingPoints = mountingPoints;
            this.FuelCapacity = fuelCapacity;
            // to ensure "requirements" is required (not null)
            if (requirements == null)
            {
                throw new ArgumentNullException("requirements is a required property for ShipFrame and cannot be null");
            }
            this.Requirements = requirements;
            this.Condition = condition;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.
        /// </summary>
        /// <value>Condition is a range of 0 to 100 where 0 is completely worn out and 100 is brand new.</value>
        [DataMember(Name = "condition", EmitDefaultValue = false)]
        public int Condition { get; set; }

        /// <summary>
        /// Gets or Sets ModuleSlots
        /// </summary>
        [DataMember(Name = "moduleSlots", IsRequired = true, EmitDefaultValue = true)]
        public int ModuleSlots { get; set; }

        /// <summary>
        /// Gets or Sets MountingPoints
        /// </summary>
        [DataMember(Name = "mountingPoints", IsRequired = true, EmitDefaultValue = true)]
        public int MountingPoints { get; set; }

        /// <summary>
        /// Gets or Sets FuelCapacity
        /// </summary>
        [DataMember(Name = "fuelCapacity", IsRequired = true, EmitDefaultValue = true)]
        public int FuelCapacity { get; set; }

        /// <summary>
        /// Gets or Sets Requirements
        /// </summary>
        [DataMember(Name = "requirements", IsRequired = true, EmitDefaultValue = true)]
        public ShipRequirements Requirements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShipFrame {\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Condition: ").Append(Condition).Append("\n");
            sb.Append("  ModuleSlots: ").Append(ModuleSlots).Append("\n");
            sb.Append("  MountingPoints: ").Append(MountingPoints).Append("\n");
            sb.Append("  FuelCapacity: ").Append(FuelCapacity).Append("\n");
            sb.Append("  Requirements: ").Append(Requirements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ShipFrame);
        }

        /// <summary>
        /// Returns true if ShipFrame instances are equal
        /// </summary>
        /// <param name="input">Instance of ShipFrame to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ShipFrame input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Symbol == input.Symbol ||
                    this.Symbol.Equals(input.Symbol)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Condition == input.Condition ||
                    this.Condition.Equals(input.Condition)
                ) && 
                (
                    this.ModuleSlots == input.ModuleSlots ||
                    this.ModuleSlots.Equals(input.ModuleSlots)
                ) && 
                (
                    this.MountingPoints == input.MountingPoints ||
                    this.MountingPoints.Equals(input.MountingPoints)
                ) && 
                (
                    this.FuelCapacity == input.FuelCapacity ||
                    this.FuelCapacity.Equals(input.FuelCapacity)
                ) && 
                (
                    this.Requirements == input.Requirements ||
                    (this.Requirements != null &&
                    this.Requirements.Equals(input.Requirements))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Condition.GetHashCode();
                hashCode = (hashCode * 59) + this.ModuleSlots.GetHashCode();
                hashCode = (hashCode * 59) + this.MountingPoints.GetHashCode();
                hashCode = (hashCode * 59) + this.FuelCapacity.GetHashCode();
                if (this.Requirements != null)
                {
                    hashCode = (hashCode * 59) + this.Requirements.GetHashCode();
                }
                return hashCode;
            }
        }

    }

}
